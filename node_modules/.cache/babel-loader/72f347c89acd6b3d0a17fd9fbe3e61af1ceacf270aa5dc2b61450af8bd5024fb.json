{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrayBasicTreeView = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst abstract_1 = require(\"./abstract\");\nclass ArrayBasicTreeView extends abstract_1.TreeView {\n  constructor(type, tree) {\n    super();\n    this.type = type;\n    this.tree = tree;\n  }\n  /**\n   * Number of elements in the array. Equal to the Uint32 value of the Tree's length node\n   */\n  get length() {\n    return this.type.tree_getLength(this.tree.rootNode);\n  }\n  get node() {\n    return this.tree.rootNode;\n  }\n  /**\n   * Get element at `index`. Returns the Basic element type value directly\n   */\n  get(index) {\n    // First walk through the tree to get the root node for that index\n    const chunkIndex = Math.floor(index / this.type.itemsPerChunk);\n    const leafNode = this.tree.getNodeAtDepth(this.type.depth, chunkIndex);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return this.type.elementType.tree_getFromPackedNode(leafNode, index);\n  }\n  /**\n   * Set Basic element type `value` at `index`\n   */\n  set(index, value) {\n    const length = this.length;\n    if (index >= length) {\n      throw Error(`Error setting index over length ${index} > ${length}`);\n    }\n    const chunkIndex = Math.floor(index / this.type.itemsPerChunk);\n    const leafNodePrev = this.tree.getNodeAtDepth(this.type.depth, chunkIndex);\n    // Create a new node to preserve immutability\n    const leafNode = leafNodePrev.clone();\n    this.type.elementType.tree_setToPackedNode(leafNode, index, value);\n    // Commit immediately\n    this.tree.setNodeAtDepth(this.type.depth, chunkIndex, leafNode);\n  }\n  /**\n   * Get all values of this array as Basic element type values, from index zero to `this.length - 1`\n   */\n  getAll() {\n    const length = this.length;\n    const chunksNode = this.type.tree_getChunksNode(this.node);\n    const chunkCount = Math.ceil(length / this.type.itemsPerChunk);\n    const leafNodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.type.chunkDepth, 0, chunkCount);\n    const values = new Array(length);\n    const itemsPerChunk = this.type.itemsPerChunk; // Prevent many access in for loop below\n    const lenFullNodes = Math.floor(length / itemsPerChunk);\n    const remainder = length % itemsPerChunk;\n    for (let n = 0; n < lenFullNodes; n++) {\n      const leafNode = leafNodes[n];\n      // TODO: Implement add a fast bulk packed element reader in the elementType\n      // ```\n      // abstract getValuesFromPackedNode(leafNode: LeafNode, output: V[], indexOffset: number): void;\n      // ```\n      // if performance here is a problem\n      for (let i = 0; i < itemsPerChunk; i++) {\n        values[n * itemsPerChunk + i] = this.type.elementType.tree_getFromPackedNode(leafNode, i);\n      }\n    }\n    if (remainder > 0) {\n      const leafNode = leafNodes[lenFullNodes];\n      for (let i = 0; i < remainder; i++) {\n        values[lenFullNodes * itemsPerChunk + i] = this.type.elementType.tree_getFromPackedNode(leafNode, i);\n      }\n    }\n    return values;\n  }\n}\nexports.ArrayBasicTreeView = ArrayBasicTreeView;","map":{"version":3,"names":["persistent_merkle_tree_1","require","abstract_1","ArrayBasicTreeView","TreeView","constructor","type","tree","length","tree_getLength","rootNode","node","get","index","chunkIndex","Math","floor","itemsPerChunk","leafNode","getNodeAtDepth","depth","elementType","tree_getFromPackedNode","set","value","Error","leafNodePrev","clone","tree_setToPackedNode","setNodeAtDepth","getAll","chunksNode","tree_getChunksNode","chunkCount","ceil","leafNodes","getNodesAtDepth","chunkDepth","values","Array","lenFullNodes","remainder","n","i","exports"],"sources":["../../src/view/arrayBasic.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}