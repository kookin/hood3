{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListBasicType = void 0;\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst listBasic_1 = require(\"../view/listBasic\");\nconst listBasic_2 = require(\"../viewDU/listBasic\");\nconst array_1 = require(\"./array\");\n/**\n * List: ordered variable-length homogeneous collection, limited to N values\n *\n * Array of Basic type:\n * - Basic types are max 32 bytes long so multiple values may be packed in the same node.\n * - Basic types are never returned in a view wrapper, but their value representation\n */\nclass ListBasicType extends array_1.ArrayType {\n  constructor(elementType, limit, opts) {\n    super(elementType);\n    this.elementType = elementType;\n    this.limit = limit;\n    this.fixedSize = null;\n    this.isList = true;\n    this.isViewMutable = true;\n    this.defaultLen = 0;\n    if (!elementType.isBasic) throw Error(\"elementType must be basic\");\n    if (limit === 0) throw Error(\"List limit must be > 0\");\n    this.typeName = opts?.typeName ?? `List[${elementType.typeName}, ${limit}]`;\n    // TODO Check that itemsPerChunk is an integer\n    this.itemsPerChunk = 32 / elementType.byteLength;\n    this.maxChunkCount = Math.ceil(this.limit * elementType.byteLength / 32);\n    this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n    // Depth includes the extra level for the length node\n    this.depth = this.chunkDepth + 1;\n    this.minSize = 0;\n    this.maxSize = this.limit * elementType.maxSize;\n  }\n  static named(elementType, limit, opts) {\n    return new (named_1.namedClass(ListBasicType, opts.typeName))(elementType, limit, opts);\n  }\n  getView(tree) {\n    return new listBasic_1.ListBasicTreeView(this, tree);\n  }\n  getViewDU(node, cache) {\n    // cache type should be validated (if applicate) in the view\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new listBasic_2.ListBasicTreeViewDU(this, node, cache);\n  }\n  commitView(view) {\n    return view.node;\n  }\n  commitViewDU(view) {\n    view.commit();\n    return view.node;\n  }\n  cacheOfViewDU(view) {\n    return view.cache;\n  }\n  // Serialization + deserialization\n  value_serializedSize(value) {\n    return value.length * this.elementType.byteLength;\n  }\n  value_serializeToBytes(output, offset, value) {\n    return arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, value.length, output, offset, value);\n  }\n  value_deserializeFromBytes(data, start, end) {\n    return arrayBasic_1.value_deserializeFromBytesArrayBasic(this.elementType, data, start, end, this);\n  }\n  tree_serializedSize(node) {\n    return this.tree_getLength(node) * this.elementType.byteLength;\n  }\n  tree_serializeToBytes(output, offset, node) {\n    const chunksNode = this.tree_getChunksNode(node);\n    const length = this.tree_getLength(node);\n    return arrayBasic_1.tree_serializeToBytesArrayBasic(this.elementType, length, this.chunkDepth, output, offset, chunksNode);\n  }\n  tree_deserializeFromBytes(data, start, end) {\n    return arrayBasic_1.tree_deserializeFromBytesArrayBasic(this.elementType, this.chunkDepth, data, start, end, this);\n  }\n  // Helpers for TreeView\n  tree_getLength(node) {\n    return node.right.getUint(4, 0);\n  }\n  tree_setLength(tree, length) {\n    tree.rootNode = arrayBasic_1.addLengthNode(tree.rootNode.left, length);\n  }\n  tree_getChunksNode(node) {\n    return node.left;\n  }\n  tree_setChunksNode(rootNode, chunksNode, newLength) {\n    return arrayBasic_1.setChunksNode(rootNode, chunksNode, newLength);\n  }\n  // Merkleization\n  hashTreeRoot(value) {\n    return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);\n  }\n  getRoots(value) {\n    const uint8Array = new Uint8Array(this.value_serializedSize(value));\n    const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n    arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, value.length, {\n      uint8Array,\n      dataView\n    }, 0, value);\n    return merkleize_1.splitIntoRootChunks(uint8Array);\n  }\n}\nexports.ListBasicType = ListBasicType;","map":{"version":3,"names":["arrayBasic_1","require","merkleize_1","named_1","listBasic_1","listBasic_2","array_1","ListBasicType","ArrayType","constructor","elementType","limit","opts","fixedSize","isList","isViewMutable","defaultLen","isBasic","Error","typeName","itemsPerChunk","byteLength","maxChunkCount","Math","ceil","chunkDepth","maxChunksToDepth","depth","minSize","maxSize","named","namedClass","getView","tree","ListBasicTreeView","getViewDU","node","cache","ListBasicTreeViewDU","commitView","view","commitViewDU","commit","cacheOfViewDU","value_serializedSize","value","length","value_serializeToBytes","output","offset","value_serializeToBytesArrayBasic","value_deserializeFromBytes","data","start","end","value_deserializeFromBytesArrayBasic","tree_serializedSize","tree_getLength","tree_serializeToBytes","chunksNode","tree_getChunksNode","tree_serializeToBytesArrayBasic","tree_deserializeFromBytes","tree_deserializeFromBytesArrayBasic","right","getUint","tree_setLength","rootNode","addLengthNode","left","tree_setChunksNode","newLength","setChunksNode","hashTreeRoot","mixInLength","getRoots","uint8Array","Uint8Array","dataView","DataView","buffer","byteOffset","splitIntoRootChunks","exports"],"sources":["../../src/type/listBasic.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}