{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListBasicTreeView = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nclass ListBasicTreeView extends arrayBasic_1.ArrayBasicTreeView {\n  constructor(type, tree) {\n    super(type, tree);\n    this.type = type;\n    this.tree = tree;\n  }\n  /**\n   * Adds one value element at the end of the array and adds 1 to the current Tree length.\n   */\n  push(value) {\n    const length = this.length;\n    if (length >= this.type.limit) {\n      throw Error(\"Error pushing over limit\");\n    }\n    this.type.tree_setLength(this.tree, length + 1);\n    // If in new node..\n    if (length % this.type.itemsPerChunk === 0) {\n      // TODO: Optimize: This `inNewNode` could be ommitted but it would cause a full navigation in .set()\n      // Benchmark the cost of that navigation vs the extra math here\n      // TODO: Optimize: prevent double initialization\n      const leafNode = persistent_merkle_tree_1.LeafNode.fromZero();\n      this.type.elementType.tree_setToPackedNode(leafNode, length, value);\n      // Commit immediately\n      const chunkIndex = Math.floor(length / this.type.itemsPerChunk);\n      this.tree.setNodeAtDepth(this.type.depth, chunkIndex, leafNode);\n    } else {\n      // Re-use .set() since no new node is added\n      this.set(length, value);\n    }\n  }\n}\nexports.ListBasicTreeView = ListBasicTreeView;","map":{"version":3,"names":["persistent_merkle_tree_1","require","arrayBasic_1","ListBasicTreeView","ArrayBasicTreeView","constructor","type","tree","push","value","length","limit","Error","tree_setLength","itemsPerChunk","leafNode","LeafNode","fromZero","elementType","tree_setToPackedNode","chunkIndex","Math","floor","setNodeAtDepth","depth","set","exports"],"sources":["../../src/view/listBasic.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,wBAAA,GAAAC,OAAA;AAGA,MAAAC,YAAA,GAAAD,OAAA;AAOA,MAAaE,iBAA0D,SAAQD,YAAA,CAAAE,kBAA+B;EAC5GC,YAAqBC,IAAgC,EAAYC,IAAU;IACzE,KAAK,CAACD,IAAI,EAAEC,IAAI,CAAC;IADE,KAAAD,IAAI,GAAJA,IAAI;IAAwC,KAAAC,IAAI,GAAJA,IAAI;EAErE;EAEA;;;EAGAC,IAAIA,CAACC,KAA2B;IAC9B,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,IAAIA,MAAM,IAAI,IAAI,CAACJ,IAAI,CAACK,KAAK,EAAE;MAC7B,MAAMC,KAAK,CAAC,0BAA0B,CAAC;;IAGzC,IAAI,CAACN,IAAI,CAACO,cAAc,CAAC,IAAI,CAACN,IAAI,EAAEG,MAAM,GAAG,CAAC,CAAC;IAE/C;IACA,IAAIA,MAAM,GAAG,IAAI,CAACJ,IAAI,CAACQ,aAAa,KAAK,CAAC,EAAE;MAC1C;MACA;MACA;MACA,MAAMC,QAAQ,GAAGf,wBAAA,CAAAgB,QAAQ,CAACC,QAAQ,EAAE;MACpC,IAAI,CAACX,IAAI,CAACY,WAAW,CAACC,oBAAoB,CAACJ,QAAQ,EAAEL,MAAM,EAAED,KAAK,CAAC;MAEnE;MACA,MAAMW,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACZ,MAAM,GAAG,IAAI,CAACJ,IAAI,CAACQ,aAAa,CAAC;MAC/D,IAAI,CAACP,IAAI,CAACgB,cAAc,CAAC,IAAI,CAACjB,IAAI,CAACkB,KAAK,EAAEJ,UAAU,EAAEL,QAAQ,CAAC;KAChE,MAAM;MACL;MACA,IAAI,CAACU,GAAG,CAACf,MAAM,EAAED,KAAK,CAAC;;EAE3B;;AA/BFiB,OAAA,CAAAvB,iBAAA,GAAAA,iBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}