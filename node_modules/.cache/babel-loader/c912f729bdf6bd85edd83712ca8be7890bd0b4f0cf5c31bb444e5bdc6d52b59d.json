{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContainerTreeViewClass = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst basic_1 = require(\"../type/basic\");\nconst composite_1 = require(\"../type/composite\");\nconst abstract_1 = require(\"./abstract\");\n/**\n * Intented usage:\n *\n * - Get initial BeaconState from disk.\n * - Before applying next block, switch to mutable\n * - Get some field, create a view in mutable mode\n * - Do modifications of the state in the state transition function\n * - When done, commit and apply new root node once to og BeaconState\n * - However, keep all the caches and transfer them to the new BeaconState\n *\n * Questions:\n * - Can the child views created in mutable mode switch to not mutable? If so, it seems that it needs to recursively\n *   iterate the entire data structure and views\n *\n */\nclass ContainerTreeView extends abstract_1.TreeView {\n  constructor(type, tree) {\n    super();\n    this.type = type;\n    this.tree = tree;\n  }\n  get node() {\n    return this.tree.rootNode;\n  }\n}\nfunction getContainerTreeViewClass(type) {\n  class CustomContainerTreeView extends ContainerTreeView {}\n  // Dynamically define prototype methods\n  for (let index = 0; index < type.fieldsEntries.length; index++) {\n    const {\n      fieldName,\n      fieldType\n    } = type.fieldsEntries[index];\n    // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n    // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n    // and use the cached views array to store the new node.\n    if (basic_1.isBasicType(fieldType)) {\n      Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // TODO: Review the memory cost of this closures\n        get: function () {\n          const leafNode = persistent_merkle_tree_1.getNodeAtDepth(this.node, this.type.depth, index);\n          return fieldType.tree_getFromNode(leafNode);\n        },\n        set: function (value) {\n          const leafNodePrev = persistent_merkle_tree_1.getNodeAtDepth(this.node, this.type.depth, index);\n          const leafNode = leafNodePrev.clone();\n          fieldType.tree_setToNode(leafNode, value);\n          this.tree.setNodeAtDepth(this.type.depth, index, leafNode);\n        }\n      });\n    }\n    // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n    // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n    // set it to the parent tree in the field gindex.\n    else if (composite_1.isCompositeType(fieldType)) {\n      Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // Returns TreeView of fieldName\n        get: function () {\n          const gindex = persistent_merkle_tree_1.toGindexBitstring(this.type.depth, index);\n          return fieldType.getView(this.tree.getSubtree(gindex));\n        },\n        // Expects TreeView of fieldName\n        set: function (value) {\n          const node = fieldType.commitView(value);\n          this.tree.setNodeAtDepth(this.type.depth, index, node);\n        }\n      });\n    }\n    // Should never happen\n    else {\n      /* istanbul ignore next - unreachable code */\n      throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);\n    }\n  }\n  // Change class name\n  Object.defineProperty(CustomContainerTreeView, \"name\", {\n    value: type.typeName,\n    writable: false\n  });\n  return CustomContainerTreeView;\n}\nexports.getContainerTreeViewClass = getContainerTreeViewClass;","map":{"version":3,"names":["persistent_merkle_tree_1","require","basic_1","composite_1","abstract_1","ContainerTreeView","TreeView","constructor","type","tree","node","rootNode","getContainerTreeViewClass","CustomContainerTreeView","index","fieldsEntries","length","fieldName","fieldType","isBasicType","Object","defineProperty","prototype","configurable","enumerable","get","leafNode","getNodeAtDepth","depth","tree_getFromNode","set","value","leafNodePrev","clone","tree_setToNode","setNodeAtDepth","isCompositeType","gindex","toGindexBitstring","getView","getSubtree","commitView","Error","typeName","writable","exports"],"sources":["../../src/view/container.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}