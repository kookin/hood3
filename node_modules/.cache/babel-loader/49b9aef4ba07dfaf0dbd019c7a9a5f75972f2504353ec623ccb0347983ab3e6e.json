{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnionType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst composite_1 = require(\"./composite\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst none_1 = require(\"./none\");\nconst VALUE_GINDEX = BigInt(2);\nconst SELECTOR_GINDEX = BigInt(3);\n/**\n * Union: union type containing one of the given subtypes\n * - Notation: Union[type_0, type_1, ...], e.g. union[None, uint64, uint32]\n */\nclass UnionType extends composite_1.CompositeType {\n  constructor(types, opts) {\n    super();\n    this.types = types;\n    this.depth = 1;\n    this.maxChunkCount = 1;\n    this.fixedSize = null;\n    this.isList = true;\n    this.isViewMutable = true;\n    if (types.length >= 128) {\n      throw Error(\"Must have less than 128 types\");\n    }\n    if (types.length === 0) {\n      throw Error(\"Must have at least 1 type option\");\n    }\n    if (types[0] instanceof none_1.NoneType && types.length < 2) {\n      throw Error(\"Must have at least 2 type options if the first is None\");\n    }\n    for (let i = 1; i < types.length; i++) {\n      if (types[i] instanceof none_1.NoneType) {\n        throw Error(\"None may only be the first option\");\n      }\n    }\n    this.typeName = opts?.typeName ?? `Union[${types.map(t => t.typeName).join(\",\")}]`;\n    const minLens = [];\n    const maxLens = [];\n    for (const _type of types) {\n      minLens.push(_type.minSize);\n      maxLens.push(_type.maxSize);\n    }\n    this.minSize = 1 + Math.min(...minLens);\n    this.maxSize = 1 + Math.max(...maxLens);\n    this.maxSelector = this.types.length - 1;\n  }\n  static named(types, opts) {\n    return new (named_1.namedClass(UnionType, opts.typeName))(types, opts);\n  }\n  defaultValue() {\n    return {\n      selector: 0,\n      value: this.types[0].defaultValue()\n    };\n  }\n  getView(tree) {\n    return this.tree_toValue(tree.rootNode);\n  }\n  getViewDU(node) {\n    return this.tree_toValue(node);\n  }\n  cacheOfViewDU() {\n    return;\n  }\n  commitView(view) {\n    return this.value_toTree(view);\n  }\n  commitViewDU(view) {\n    return this.value_toTree(view);\n  }\n  value_serializedSize(value) {\n    return 1 + this.types[value.selector].value_serializedSize(value.value);\n  }\n  value_serializeToBytes(output, offset, value) {\n    output.uint8Array[offset] = value.selector;\n    return this.types[value.selector].value_serializeToBytes(output, offset + 1, value.value);\n  }\n  value_deserializeFromBytes(data, start, end) {\n    const selector = data.uint8Array[start];\n    if (selector > this.maxSelector) {\n      throw Error(`Invalid selector ${selector}`);\n    }\n    return {\n      selector,\n      value: this.types[selector].value_deserializeFromBytes(data, start + 1, end)\n    };\n  }\n  tree_serializedSize(node) {\n    const selector = arrayBasic_1.getLengthFromRootNode(node);\n    const valueNode = node.left;\n    return 1 + this.types[selector].value_serializedSize(valueNode);\n  }\n  tree_serializeToBytes(output, offset, node) {\n    const selector = arrayBasic_1.getLengthFromRootNode(node);\n    const valueNode = node.left;\n    output.uint8Array[offset] = selector;\n    return this.types[selector].tree_serializeToBytes(output, offset + 1, valueNode);\n  }\n  tree_deserializeFromBytes(data, start, end) {\n    const selector = data.uint8Array[start];\n    if (selector > this.maxSelector) {\n      throw Error(`Invalid selector ${selector}`);\n    }\n    const valueNode = this.types[selector].tree_deserializeFromBytes(data, start + 1, end);\n    return arrayBasic_1.addLengthNode(valueNode, selector);\n  }\n  // Merkleization\n  hashTreeRoot(value) {\n    return merkleize_1.mixInLength(super.hashTreeRoot(value), value.selector);\n  }\n  getRoots(value) {\n    const valueRoot = this.types[value.selector].hashTreeRoot(value.value);\n    return [valueRoot];\n  }\n  // Proofs\n  getPropertyGindex(prop) {\n    switch (prop) {\n      case \"value\":\n        return VALUE_GINDEX;\n      case \"selector\":\n        return SELECTOR_GINDEX;\n      default:\n        throw new Error(`Invalid Union type property ${prop}`);\n    }\n  }\n  getPropertyType() {\n    // a Union has multiple types\n    throw new Error(\"Not applicable for Union type\");\n  }\n  getIndexProperty(index) {\n    if (index === 0) return \"value\";\n    if (index === 1) return \"selector\";\n    throw Error(\"Union index of out bounds\");\n  }\n  tree_getLeafGindices(rootGindex, rootNode) {\n    if (!rootNode) {\n      throw Error(\"rootNode required\");\n    }\n    const gindices = [persistent_merkle_tree_1.concatGindices([rootGindex, SELECTOR_GINDEX])];\n    const selector = arrayBasic_1.getLengthFromRootNode(rootNode);\n    const type = this.types[selector];\n    const extendedFieldGindex = persistent_merkle_tree_1.concatGindices([rootGindex, VALUE_GINDEX]);\n    if (composite_1.isCompositeType(type)) {\n      gindices.push(...type.tree_getLeafGindices(extendedFieldGindex, persistent_merkle_tree_1.getNode(rootNode, VALUE_GINDEX)));\n    } else {\n      gindices.push(extendedFieldGindex);\n    }\n    return gindices;\n  }\n  // JSON\n  fromJson(json) {\n    if (typeof json !== \"object\") {\n      throw new Error(\"JSON must be of type object\");\n    }\n    const union = json;\n    if (typeof union.selector !== \"number\") {\n      throw new Error(\"Invalid JSON Union selector must be number\");\n    }\n    const type = this.types[union.selector];\n    if (!type) {\n      throw new Error(\"Invalid JSON Union selector out of range\");\n    }\n    return {\n      selector: union.selector,\n      value: type.toJson(union.value)\n    };\n  }\n  toJson(value) {\n    return {\n      selector: value.selector,\n      value: this.types[value.selector].toJson(value.value)\n    };\n  }\n  clone(value) {\n    return {\n      selector: value.selector,\n      value: this.types[value.selector].clone(value.value)\n    };\n  }\n  equals(a, b) {\n    if (a.selector !== b.selector) {\n      return false;\n    }\n    return this.types[a.selector].equals(a.value, b.value);\n  }\n}\nexports.UnionType = UnionType;","map":{"version":3,"names":["persistent_merkle_tree_1","require","merkleize_1","named_1","composite_1","arrayBasic_1","none_1","VALUE_GINDEX","BigInt","SELECTOR_GINDEX","UnionType","CompositeType","constructor","types","opts","depth","maxChunkCount","fixedSize","isList","isViewMutable","length","Error","NoneType","i","typeName","map","t","join","minLens","maxLens","_type","push","minSize","maxSize","Math","min","max","maxSelector","named","namedClass","defaultValue","selector","value","getView","tree","tree_toValue","rootNode","getViewDU","node","cacheOfViewDU","commitView","view","value_toTree","commitViewDU","value_serializedSize","value_serializeToBytes","output","offset","uint8Array","value_deserializeFromBytes","data","start","end","tree_serializedSize","getLengthFromRootNode","valueNode","left","tree_serializeToBytes","tree_deserializeFromBytes","addLengthNode","hashTreeRoot","mixInLength","getRoots","valueRoot","getPropertyGindex","prop","getPropertyType","getIndexProperty","index","tree_getLeafGindices","rootGindex","gindices","concatGindices","type","extendedFieldGindex","isCompositeType","getNode","fromJson","json","union","toJson","clone","equals","a","b","exports"],"sources":["../../src/type/union.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}