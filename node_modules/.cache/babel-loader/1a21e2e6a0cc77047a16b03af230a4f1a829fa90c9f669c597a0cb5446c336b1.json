{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitArrayTreeViewDU = void 0;\nconst abstract_1 = require(\"./abstract\");\n/**\n * Thin wrapper around BitArray to upstream changes after `this.commit()`\n */\nclass BitArrayTreeViewDU extends abstract_1.TreeViewDU {\n  constructor(type, _rootNode) {\n    super();\n    this.type = type;\n    this._rootNode = _rootNode;\n    /** Cached BitArray instance computed only on demand */\n    this._bitArray = null;\n  }\n  get node() {\n    return this._rootNode;\n  }\n  get cache() {\n    return;\n  }\n  commit() {\n    if (this._bitArray !== null) {\n      this._rootNode = this.type.value_toTree(this._bitArray);\n    }\n  }\n  // Wrapped API from BitArray\n  /** @see BitArray.uint8Array */\n  get uint8Array() {\n    return this.bitArray.uint8Array;\n  }\n  /** @see BitArray.bitLen */\n  get bitLen() {\n    return this.bitArray.bitLen;\n  }\n  /** @see BitArray.get */\n  get(bitIndex) {\n    return this.bitArray.get(bitIndex);\n  }\n  /** @see BitArray.set */\n  set(bitIndex, bit) {\n    this.bitArray.set(bitIndex, bit);\n  }\n  /** @see BitArray.mergeOrWith */\n  mergeOrWith(bitArray2) {\n    this.bitArray.mergeOrWith(bitArray2);\n  }\n  /** @see BitArray.intersectValues */\n  intersectValues(values) {\n    return this.bitArray.intersectValues(values);\n  }\n  /** @see BitArray.getTrueBitIndexes */\n  getTrueBitIndexes() {\n    return this.bitArray.getTrueBitIndexes();\n  }\n  /** @see BitArray.getSingleTrueBit */\n  getSingleTrueBit() {\n    return this.bitArray.getSingleTrueBit();\n  }\n  /** @see BitArray.toBoolArray */\n  toBoolArray() {\n    return this.bitArray.toBoolArray();\n  }\n  /** Lazily computed bitArray instance */\n  get bitArray() {\n    if (this._bitArray === null) {\n      this._bitArray = this.type.tree_toValue(this._rootNode);\n    }\n    return this._bitArray;\n  }\n  clearCache() {\n    this._bitArray = null;\n  }\n}\nexports.BitArrayTreeViewDU = BitArrayTreeViewDU;","map":{"version":3,"names":["abstract_1","require","BitArrayTreeViewDU","TreeViewDU","constructor","type","_rootNode","_bitArray","node","cache","commit","value_toTree","uint8Array","bitArray","bitLen","get","bitIndex","set","bit","mergeOrWith","bitArray2","intersectValues","values","getTrueBitIndexes","getSingleTrueBit","toBoolArray","tree_toValue","clearCache","exports"],"sources":["../../src/viewDU/bitArray.ts"],"sourcesContent":[null],"mappings":";;;;;;AAGA,MAAAA,UAAA,GAAAC,OAAA;AAEA;;;AAGA,MAAaC,kBAAmB,SAAQF,UAAA,CAAAG,UAAqD;EAI3FC,YAAqBC,IAA+C,EAAYC,SAAe;IAC7F,KAAK,EAAE;IADY,KAAAD,IAAI,GAAJA,IAAI;IAAuD,KAAAC,SAAS,GAATA,SAAS;IAHzF;IACQ,KAAAC,SAAS,GAAoB,IAAI;EAIzC;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,IAAI,CAACF,SAAS;EACvB;EAEA,IAAIG,KAAKA,CAAA;IACP;EACF;EAEAC,MAAMA,CAAA;IACJ,IAAI,IAAI,CAACH,SAAS,KAAK,IAAI,EAAE;MAC3B,IAAI,CAACD,SAAS,GAAG,IAAI,CAACD,IAAI,CAACM,YAAY,CAAC,IAAI,CAACJ,SAAS,CAAC;;EAE3D;EAEA;EAEA;EACA,IAAIK,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACC,QAAQ,CAACD,UAAU;EACjC;EAEA;EACA,IAAIE,MAAMA,CAAA;IACR,OAAO,IAAI,CAACD,QAAQ,CAACC,MAAM;EAC7B;EAEA;EACAC,GAAGA,CAACC,QAAgB;IAClB,OAAO,IAAI,CAACH,QAAQ,CAACE,GAAG,CAACC,QAAQ,CAAC;EACpC;EAEA;EACAC,GAAGA,CAACD,QAAgB,EAAEE,GAAY;IAChC,IAAI,CAACL,QAAQ,CAACI,GAAG,CAACD,QAAQ,EAAEE,GAAG,CAAC;EAClC;EAEA;EACAC,WAAWA,CAACC,SAAmB;IAC7B,IAAI,CAACP,QAAQ,CAACM,WAAW,CAACC,SAAS,CAAC;EACtC;EAEA;EACAC,eAAeA,CAAIC,MAAW;IAC5B,OAAO,IAAI,CAACT,QAAQ,CAACQ,eAAe,CAACC,MAAM,CAAC;EAC9C;EAEA;EACAC,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACV,QAAQ,CAACU,iBAAiB,EAAE;EAC1C;EAEA;EACAC,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACX,QAAQ,CAACW,gBAAgB,EAAE;EACzC;EAEA;EACAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACZ,QAAQ,CAACY,WAAW,EAAE;EACpC;EAEA;EACA,IAAYZ,QAAQA,CAAA;IAClB,IAAI,IAAI,CAACN,SAAS,KAAK,IAAI,EAAE;MAC3B,IAAI,CAACA,SAAS,GAAG,IAAI,CAACF,IAAI,CAACqB,YAAY,CAAC,IAAI,CAACpB,SAAS,CAAC;;IAEzD,OAAO,IAAI,CAACC,SAAS;EACvB;EAEUoB,UAAUA,CAAA;IAClB,IAAI,CAACpB,SAAS,GAAG,IAAI;EACvB;;AA/EFqB,OAAA,CAAA1B,kBAAA,GAAAA,kBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}