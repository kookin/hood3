{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContainerTreeViewDUClass = void 0;\nconst composite_1 = require(\"../type/composite\");\nconst abstract_1 = require(\"./abstract\");\n/* eslint-disable @typescript-eslint/member-ordering */\nclass ContainerTreeViewDU extends abstract_1.TreeViewDU {\n  constructor(type, node) {\n    super();\n    this.type = type;\n    this.valueChanged = null;\n    this._rootNode = node;\n  }\n  get node() {\n    return this._rootNode;\n  }\n  get cache() {\n    return;\n  }\n  commit() {\n    if (this.valueChanged === null) {\n      return;\n    }\n    const value = this.valueChanged;\n    this.valueChanged = null;\n    this._rootNode = this.type.value_toTree(value);\n  }\n  clearCache() {\n    this.valueChanged = null;\n  }\n}\nfunction getContainerTreeViewDUClass(type) {\n  class CustomContainerTreeViewDU extends ContainerTreeViewDU {}\n  // Dynamically define prototype methods\n  for (let index = 0; index < type.fieldsEntries.length; index++) {\n    const {\n      fieldName,\n      fieldType\n    } = type.fieldsEntries[index];\n    // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n    // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n    // and use the cached views array to store the new node.\n    if (fieldType.isBasic) {\n      Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // TODO: Review the memory cost of this closures\n        get: function () {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n          return (this.valueChanged || this._rootNode.value)[fieldName];\n        },\n        set: function (value) {\n          if (this.valueChanged === null) {\n            this.valueChanged = this.type.clone(this._rootNode.value);\n          }\n          this.valueChanged[fieldName] = value;\n        }\n      });\n    }\n    // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n    // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n    // set it to the parent tree in the field gindex.\n    else if (composite_1.isCompositeType(fieldType)) {\n      Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // Returns TreeViewDU of fieldName\n        get: function () {\n          const value = this.valueChanged || this._rootNode.value;\n          return fieldType.toViewDU(value[fieldName]);\n        },\n        // Expects TreeViewDU of fieldName\n        set: function (view) {\n          if (this.valueChanged === null) {\n            this.valueChanged = this.type.clone(this._rootNode.value);\n          }\n          const value = fieldType.toValueFromViewDU(view);\n          this.valueChanged[fieldName] = value;\n        }\n      });\n    }\n    // Should never happen\n    else {\n      /* istanbul ignore next - unreachable code */\n      throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);\n    }\n  }\n  // Change class name\n  Object.defineProperty(CustomContainerTreeViewDU, \"name\", {\n    value: type.typeName,\n    writable: false\n  });\n  return CustomContainerTreeViewDU;\n}\nexports.getContainerTreeViewDUClass = getContainerTreeViewDUClass;","map":{"version":3,"names":["composite_1","require","abstract_1","ContainerTreeViewDU","TreeViewDU","constructor","type","node","valueChanged","_rootNode","cache","commit","value","value_toTree","clearCache","getContainerTreeViewDUClass","CustomContainerTreeViewDU","index","fieldsEntries","length","fieldName","fieldType","isBasic","Object","defineProperty","prototype","configurable","enumerable","get","set","clone","isCompositeType","toViewDU","view","toValueFromViewDU","Error","typeName","writable","exports"],"sources":["../../src/viewDU/containerNodeStruct.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}