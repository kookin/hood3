{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TreeView = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\n/**\n * A Tree View is a wrapper around a type and an SSZ Tree that contains:\n * - data merkleized\n * - a hook to its parent Tree to propagate changes upwards\n *\n * **View**\n * - Best for simple usage where performance is NOT important\n * - Applies changes immediately\n * - Has reference to parent tree\n * - Does NOT have caches for fast get / set ops\n */\nclass TreeView {\n  /** Serialize view to binary data */\n  serialize() {\n    const output = new Uint8Array(this.type.tree_serializedSize(this.node));\n    const dataView = new DataView(output.buffer, output.byteOffset, output.byteLength);\n    this.type.tree_serializeToBytes({\n      uint8Array: output,\n      dataView\n    }, 0, this.node);\n    return output;\n  }\n  /**\n   * Merkleize view and compute its hashTreeRoot.\n   *\n   * See spec for definition of hashTreeRoot:\n   * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#merkleization\n   */\n  hashTreeRoot() {\n    return this.node.root;\n  }\n  /**\n   * Create a Merkle multiproof on this view's data.\n   * A `path` is an array of 'JSON' paths into the data\n   * @example\n   * ```ts\n   * state.createProof([\n   *   [\"validators\", 1234, \"slashed\"],\n   *   [\"genesisTime\"]\n   * ])\n   * ```\n   *\n   * See spec for definition of merkle multiproofs:\n   * https://github.com/ethereum/consensus-specs/blob/dev/ssz/merkle-proofs.md#merkle-multiproofs\n   */\n  createProof(paths) {\n    return this.type.tree_createProof(this.node, paths);\n  }\n  /**\n   * Transform the view into a value, from the current node instance.\n   * For ViewDU returns the value of the committed data, so call .commit() before if there are pending changes.\n   */\n  toValue() {\n    return this.type.tree_toValue(this.node);\n  }\n  /** Return a new Tree View instance referencing the same internal `Node`. Drops its existing `Tree` hook if any */\n  clone() {\n    return this.type.getView(new persistent_merkle_tree_1.Tree(this.node));\n  }\n}\nexports.TreeView = TreeView;","map":{"version":3,"names":["persistent_merkle_tree_1","require","TreeView","serialize","output","Uint8Array","type","tree_serializedSize","node","dataView","DataView","buffer","byteOffset","byteLength","tree_serializeToBytes","uint8Array","hashTreeRoot","root","createProof","paths","tree_createProof","toValue","tree_toValue","clone","getView","Tree","exports"],"sources":["../../src/view/abstract.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,wBAAA,GAAAC,OAAA;AAIA;;;;;;;;;;;AAWA,MAAsBC,QAAQ;EAM5B;EACAC,SAASA,CAAA;IACP,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,IAAI,CAACC,IAAI,CAACC,mBAAmB,CAAC,IAAI,CAACC,IAAI,CAAC,CAAC;IACvE,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAACN,MAAM,CAACO,MAAM,EAAEP,MAAM,CAACQ,UAAU,EAAER,MAAM,CAACS,UAAU,CAAC;IAClF,IAAI,CAACP,IAAI,CAACQ,qBAAqB,CAAC;MAACC,UAAU,EAAEX,MAAM;MAAEK;IAAQ,CAAC,EAAE,CAAC,EAAE,IAAI,CAACD,IAAI,CAAC;IAC7E,OAAOJ,MAAM;EACf;EAEA;;;;;;EAMAY,YAAYA,CAAA;IACV,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI;EACvB;EAEA;;;;;;;;;;;;;;EAcAC,WAAWA,CAACC,KAAiB;IAC3B,OAAO,IAAI,CAACb,IAAI,CAACc,gBAAgB,CAAC,IAAI,CAACZ,IAAI,EAAEW,KAAK,CAAC;EACrD;EAEA;;;;EAIAE,OAAOA,CAAA;IACL,OAAO,IAAI,CAACf,IAAI,CAACgB,YAAY,CAAC,IAAI,CAACd,IAAI,CAAe;EACxD;EAEA;EACAe,KAAKA,CAAA;IACH,OAAO,IAAI,CAACjB,IAAI,CAACkB,OAAO,CAAC,IAAIxB,wBAAA,CAAAyB,IAAI,CAAC,IAAI,CAACjB,IAAI,CAAC,CAAS;EACvD;;AArDFkB,OAAA,CAAAxB,QAAA,GAAAA,QAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}