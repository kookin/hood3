{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ByteListType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst byteArray_1 = require(\"./byteArray\");\n/**\n * ByteList: Immutable alias of List[byte, N]\n * - Notation: `ByteList[N]`\n * - Value: `Uint8Array`\n * - View: `Uint8Array`\n * - ViewDU: `Uint8Array`\n *\n * ByteList is an immutable value which is represented by a Uint8Array for memory efficiency and performance.\n * Note: Consumers of this type MUST never mutate the `Uint8Array` representation of a ByteList.\n *\n * For a `ByteListType` with mutability, use `ListBasicType(byteType)`\n */\nclass ByteListType extends byteArray_1.ByteArrayType {\n  constructor(limitBytes, opts) {\n    super();\n    this.limitBytes = limitBytes;\n    this.fixedSize = null;\n    this.isList = true;\n    if (limitBytes === 0) throw Error(\"List limit must be > 0\");\n    this.typeName = opts?.typeName ?? `ByteList[${limitBytes}]`;\n    this.maxChunkCount = Math.ceil(this.limitBytes / 32);\n    this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n    this.depth = 1 + this.chunkDepth;\n    this.minSize = 0;\n    this.maxSize = this.limitBytes;\n  }\n  static named(limitBits, opts) {\n    return new (named_1.namedClass(ByteListType, opts.typeName))(limitBits, opts);\n  }\n  // Views: inherited from ByteArrayType\n  // Serialization + deserialization\n  value_serializedSize(value) {\n    return value.length;\n  }\n  // value_* inherited from ByteArrayType\n  tree_serializedSize(node) {\n    return arrayBasic_1.getLengthFromRootNode(node);\n  }\n  tree_serializeToBytes(output, offset, node) {\n    const chunksNode = arrayBasic_1.getChunksNodeFromRootNode(node);\n    const byteLen = arrayBasic_1.getLengthFromRootNode(node);\n    const chunkLen = Math.ceil(byteLen / 32);\n    const nodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.chunkDepth, 0, chunkLen);\n    persistent_merkle_tree_1.packedNodeRootsToBytes(output.dataView, offset, byteLen, nodes);\n    return offset + byteLen;\n  }\n  tree_deserializeFromBytes(data, start, end) {\n    this.assertValidSize(end - start);\n    const chunksNode = persistent_merkle_tree_1.packedRootsBytesToNode(this.chunkDepth, data.dataView, start, end);\n    return arrayBasic_1.addLengthNode(chunksNode, end - start);\n  }\n  tree_getByteLen(node) {\n    if (!node) throw new Error(\"ByteListType requires a node to get leaves\");\n    return arrayBasic_1.getLengthFromRootNode(node);\n  }\n  // Merkleization: inherited from ByteArrayType\n  hashTreeRoot(value) {\n    return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);\n  }\n  // Proofs: inherited from BitArrayType\n  // JSON: inherited from ByteArrayType\n  assertValidSize(size) {\n    if (size > this.limitBytes) {\n      throw Error(`ByteList invalid size ${size} limit ${this.limitBytes}`);\n    }\n  }\n}\nexports.ByteListType = ByteListType;","map":{"version":3,"names":["persistent_merkle_tree_1","require","merkleize_1","named_1","arrayBasic_1","byteArray_1","ByteListType","ByteArrayType","constructor","limitBytes","opts","fixedSize","isList","Error","typeName","maxChunkCount","Math","ceil","chunkDepth","maxChunksToDepth","depth","minSize","maxSize","named","limitBits","namedClass","value_serializedSize","value","length","tree_serializedSize","node","getLengthFromRootNode","tree_serializeToBytes","output","offset","chunksNode","getChunksNodeFromRootNode","byteLen","chunkLen","nodes","getNodesAtDepth","packedNodeRootsToBytes","dataView","tree_deserializeFromBytes","data","start","end","assertValidSize","packedRootsBytesToNode","addLengthNode","tree_getByteLen","hashTreeRoot","mixInLength","size","exports"],"sources":["../../src/type/byteList.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}