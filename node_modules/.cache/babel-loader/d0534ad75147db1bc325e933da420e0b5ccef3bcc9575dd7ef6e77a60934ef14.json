{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContainerNodeStructType = void 0;\nconst composite_1 = require(\"./composite\");\nconst container_1 = require(\"./container\");\nconst named_1 = require(\"../util/named\");\nconst containerNodeStruct_1 = require(\"../view/containerNodeStruct\");\nconst containerNodeStruct_2 = require(\"../viewDU/containerNodeStruct\");\nconst branchNodeStruct_1 = require(\"../branchNodeStruct\");\n/**\n * ContainerNodeStruct: ordered heterogeneous collection of values.\n * - Notation: Custom name per instance\n *\n * A ContainerNodeStruct is identical to a Container type except that it represents tree data with a custom\n * BranchNodeStruct node. This special branch node represents the data of its entire sub tree as a value, instead\n * of a tree of nodes. This approach is a tradeoff:\n *\n * - More memory efficient\n * - Faster reads, since it doesn't require parsing merkleized data\n * - Slower hashing, since it has to merkleize the entire value everytime and has not intermediary hashing cache\n *\n * This tradeoff is good for data that is read often, written rarely, and consumes a lot of memory (i.e. Validator)\n */\nclass ContainerNodeStructType extends container_1.ContainerType {\n  constructor(fields, opts) {\n    super(fields, {\n      // Overwrite default \"Container\" typeName\n      // Render detailed typeName. Consumers should overwrite since it can get long\n      typeName: opts?.typeName ?? container_1.renderContainerTypeName(fields, \"ContainerNodeStruct\"),\n      ...opts,\n      getContainerTreeViewClass: containerNodeStruct_1.getContainerTreeViewClass,\n      getContainerTreeViewDUClass: containerNodeStruct_2.getContainerTreeViewDUClass\n    });\n    this.fields = fields;\n    // ContainerNodeStructType TreeViews don't handle recursive mutable TreeViews like ContainerType does.\n    // Using ContainerNodeStructType for fields that have mutable views (like a ListBasic), will result in\n    // unnexpected behaviour if those child views are mutated.\n    //\n    // For example, this example below won't persist the pushed values to the list:\n    // ```ts\n    // const type = ContainerNodeStructType({a: new ListBasicType(byteType, 1)});\n    // const view = type.defaultViewDU();\n    // view.a.push(0)\n    // ```\n    // because the ListBasicViewDU in view.a will never propagate the changes upwards to its ContainerNodeStructType.\n    for (const {\n      fieldName,\n      fieldType\n    } of this.fieldsEntries) {\n      if (composite_1.isCompositeType(fieldType) && fieldType.isViewMutable) {\n        throw Error(`ContainerNodeStructType field '${fieldName}' ${fieldType.typeName} view is mutable`);\n      }\n    }\n  }\n  static named(fields, opts) {\n    return new (named_1.namedClass(container_1.ContainerType, opts.typeName))(fields, opts);\n  }\n  tree_serializedSize(node) {\n    return this.value_serializedSize(node.value);\n  }\n  tree_serializeToBytes(output, offset, node) {\n    const {\n      value\n    } = node;\n    return this.value_serializeToBytes(output, offset, value);\n  }\n  tree_deserializeFromBytes(data, start, end) {\n    const value = this.value_deserializeFromBytes(data, start, end);\n    return new branchNodeStruct_1.BranchNodeStruct(this.valueToTree.bind(this), value);\n  }\n  // Proofs\n  // ContainerNodeStructType can only parse proofs that contain all the data.\n  // TODO: Support converting a partial tree to a partial value\n  getPropertyGindex() {\n    return null;\n  }\n  // Post process tree to convert regular BranchNode to BranchNodeStruct\n  // TODO: Optimize conversions\n  tree_fromProofNode(node) {\n    // TODO: Figure out from `node` alone if it contains complete data.\n    // Otherwise throw a nice error \"ContainerNodeStruct type requires proofs for all its data\"\n    const uint8Array = new Uint8Array(super.tree_serializedSize(node));\n    const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n    super.tree_serializeToBytes({\n      uint8Array,\n      dataView\n    }, 0, node);\n    const value = this.value_deserializeFromBytes({\n      uint8Array,\n      dataView\n    }, 0, uint8Array.length);\n    return {\n      node: new branchNodeStruct_1.BranchNodeStruct(this.valueToTree.bind(this), value),\n      done: true\n    };\n  }\n  // Overwrites for fast conversion node <-> value\n  tree_toValue(node) {\n    return node.value;\n  }\n  value_toTree(value) {\n    return new branchNodeStruct_1.BranchNodeStruct(this.valueToTree.bind(this), value);\n  }\n  // TODO: Optimize conversion\n  valueToTree(value) {\n    const uint8Array = new Uint8Array(this.value_serializedSize(value));\n    const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n    this.value_serializeToBytes({\n      uint8Array,\n      dataView\n    }, 0, value);\n    return super.tree_deserializeFromBytes({\n      uint8Array,\n      dataView\n    }, 0, uint8Array.length);\n  }\n}\nexports.ContainerNodeStructType = ContainerNodeStructType;","map":{"version":3,"names":["composite_1","require","container_1","named_1","containerNodeStruct_1","containerNodeStruct_2","branchNodeStruct_1","ContainerNodeStructType","ContainerType","constructor","fields","opts","typeName","renderContainerTypeName","getContainerTreeViewClass","getContainerTreeViewDUClass","fieldName","fieldType","fieldsEntries","isCompositeType","isViewMutable","Error","named","namedClass","tree_serializedSize","node","value_serializedSize","value","tree_serializeToBytes","output","offset","value_serializeToBytes","tree_deserializeFromBytes","data","start","end","value_deserializeFromBytes","BranchNodeStruct","valueToTree","bind","getPropertyGindex","tree_fromProofNode","uint8Array","Uint8Array","dataView","DataView","buffer","byteOffset","byteLength","length","done","tree_toValue","value_toTree","exports"],"sources":["../../src/type/containerNodeStruct.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}