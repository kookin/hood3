{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ByteArrayType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst byteArray_1 = require(\"../util/byteArray\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst composite_1 = require(\"./composite\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * ByteArray: ordered array collection of byte values\n * - Value: `Uint8Array`\n * - View: `Uint8Array`\n * - ViewDU: `Uint8Array`\n *\n * ByteArray is an immutable value which is represented by a Uint8Array for memory efficiency and performance.\n * Note: Consumers of this type MUST never mutate the `Uint8Array` representation of a ByteArray.\n */\nclass ByteArrayType extends composite_1.CompositeType {\n  constructor() {\n    super(...arguments);\n    this.isViewMutable = false;\n  }\n  defaultValue() {\n    // Since it's a byte array the minSize is bytes is the default size\n    return new Uint8Array(this.minSize);\n  }\n  getView(tree) {\n    return this.getViewDU(tree.rootNode);\n  }\n  getViewDU(node) {\n    return this.tree_toValue(node);\n  }\n  commitView(view) {\n    return this.commitViewDU(view);\n  }\n  commitViewDU(view) {\n    const uint8Array = new Uint8Array(this.value_serializedSize(view));\n    const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n    this.value_serializeToBytes({\n      uint8Array,\n      dataView\n    }, 0, view);\n    return this.tree_deserializeFromBytes({\n      uint8Array,\n      dataView\n    }, 0, uint8Array.length);\n  }\n  cacheOfViewDU() {\n    return;\n  }\n  // Over-write to prevent serialize + deserialize\n  toView(value) {\n    return value;\n  }\n  toViewDU(value) {\n    return value;\n  }\n  // Serialization + deserialization (only value is generic)\n  value_serializeToBytes(output, offset, value) {\n    output.uint8Array.set(value, offset);\n    return offset + value.length;\n  }\n  value_deserializeFromBytes(data, start, end) {\n    this.assertValidSize(end - start);\n    return Uint8Array.prototype.slice.call(data.uint8Array, start, end);\n  }\n  // Merkleization\n  getRoots(value) {\n    return merkleize_1.splitIntoRootChunks(value);\n  }\n  // Proofs\n  getPropertyGindex() {\n    // Stop navigating below this type. Must only request complete data\n    return null;\n  }\n  getPropertyType() {\n    throw Error(\"Must only request ByteArray complete data\");\n  }\n  getIndexProperty() {\n    throw Error(\"Must only request ByteArray complete data\");\n  }\n  tree_fromProofNode(node) {\n    return {\n      node,\n      done: true\n    };\n  }\n  tree_getLeafGindices(rootGindex, rootNode) {\n    const byteLen = this.tree_getByteLen(rootNode);\n    const chunkCount = Math.ceil(byteLen / 32);\n    const startIndex = persistent_merkle_tree_1.concatGindices([rootGindex, persistent_merkle_tree_1.toGindex(this.depth, BigInt(0))]);\n    const gindices = new Array(chunkCount);\n    for (let i = 0, gindex = startIndex; i < chunkCount; i++, gindex++) {\n      gindices[i] = gindex;\n    }\n    // include the length chunk\n    if (this.isList) {\n      gindices.push(persistent_merkle_tree_1.concatGindices([rootGindex, composite_1.LENGTH_GINDEX]));\n    }\n    return gindices;\n  }\n  // JSON\n  fromJson(json) {\n    const value = byteArray_1.fromHexString(json);\n    this.assertValidSize(value.length);\n    return value;\n  }\n  toJson(value) {\n    return byteArray_1.toHexString(value);\n  }\n  // ByteArray is immutable\n  clone(value) {\n    return value;\n  }\n  equals(a, b) {\n    return byteArray_1.byteArrayEquals(a, b);\n  }\n}\nexports.ByteArrayType = ByteArrayType;","map":{"version":3,"names":["persistent_merkle_tree_1","require","byteArray_1","merkleize_1","composite_1","ByteArrayType","CompositeType","constructor","isViewMutable","defaultValue","Uint8Array","minSize","getView","tree","getViewDU","rootNode","node","tree_toValue","commitView","view","commitViewDU","uint8Array","value_serializedSize","dataView","DataView","buffer","byteOffset","byteLength","value_serializeToBytes","tree_deserializeFromBytes","length","cacheOfViewDU","toView","value","toViewDU","output","offset","set","value_deserializeFromBytes","data","start","end","assertValidSize","prototype","slice","call","getRoots","splitIntoRootChunks","getPropertyGindex","getPropertyType","Error","getIndexProperty","tree_fromProofNode","done","tree_getLeafGindices","rootGindex","byteLen","tree_getByteLen","chunkCount","Math","ceil","startIndex","concatGindices","toGindex","depth","BigInt","gindices","Array","i","gindex","isList","push","LENGTH_GINDEX","fromJson","json","fromHexString","toJson","toHexString","clone","equals","a","b","byteArrayEquals","exports"],"sources":["../../src/type/byteArray.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}