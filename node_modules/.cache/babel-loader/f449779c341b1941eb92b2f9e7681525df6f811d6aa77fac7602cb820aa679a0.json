{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrayCompositeTreeViewDU = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst abstract_1 = require(\"./abstract\");\nclass ArrayCompositeTreeViewDU extends abstract_1.TreeViewDU {\n  constructor(type, _rootNode, cache) {\n    super();\n    this.type = type;\n    this._rootNode = _rootNode;\n    this.viewsChanged = new Map();\n    // TODO: Consider these properties are not accessible in the cache object persisted in the parent's cache.\n    // nodes, caches, _length, and nodesPopulated are mutated. Consider having them in a _cache object such that\n    // mutations affect the cache already found in the parent object\n    this.dirtyLength = false;\n    if (cache) {\n      this.nodes = cache.nodes;\n      this.caches = cache.caches;\n      this._length = cache.length;\n      this.nodesPopulated = cache.nodesPopulated;\n    } else {\n      this.nodes = [];\n      this.caches = [];\n      this._length = this.type.tree_getLength(_rootNode);\n      // If there are exactly 0 nodes, nodesPopulated = true because 0 / 0 are in the nodes array\n      this.nodesPopulated = this._length === 0;\n    }\n  }\n  /**\n   * Number of elements in the array. Equal to un-commited length of the array\n   */\n  get length() {\n    return this._length;\n  }\n  get node() {\n    return this._rootNode;\n  }\n  get cache() {\n    return {\n      nodes: this.nodes,\n      caches: this.caches,\n      length: this._length,\n      nodesPopulated: this.nodesPopulated\n    };\n  }\n  /**\n   * Get element at `index`. Returns a view of the Composite element type.\n   *\n   * NOTE: Assumes that any view created here will change and will call .commit() on it.\n   * .get() should be used only for cases when something may mutate. To get all items without\n   * triggering a .commit() in all them use .getAllReadOnly().\n   */\n  get(index) {\n    const viewChanged = this.viewsChanged.get(index);\n    if (viewChanged) {\n      return viewChanged;\n    }\n    let node = this.nodes[index];\n    if (node === undefined) {\n      node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n      this.nodes[index] = node;\n    }\n    // Keep a reference to the new view to call .commit on it latter, only if mutable\n    const view = this.type.elementType.getViewDU(node, this.caches[index]);\n    if (this.type.elementType.isViewMutable) {\n      this.viewsChanged.set(index, view);\n    }\n    // No need to persist the child's view cache since a second get returns this view instance.\n    // The cache is only persisted on commit where the viewsChanged map is dropped.\n    return view;\n  }\n  /**\n   * Get element at `index`. Returns a view of the Composite element type.\n   * DOES NOT PROPAGATE CHANGES: use only for reads and to skip parent references.\n   */\n  getReadonly(index) {\n    const viewChanged = this.viewsChanged.get(index);\n    if (viewChanged) {\n      return viewChanged;\n    }\n    let node = this.nodes[index];\n    if (node === undefined) {\n      node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n      this.nodes[index] = node;\n    }\n    return this.type.elementType.getViewDU(node, this.caches[index]);\n  }\n  // Did not implemented\n  // `getReadonlyValue(index: number): ValueOf<ElementType>`\n  // because it can break in unexpected ways if there are pending changes in this.viewsChanged.\n  // This function could first check if `this.viewsChanged` has a view for `index` and commit it,\n  // but that would be pretty slow, and the same result can be achieved with\n  // `this.getReadonly(index).toValue()`\n  /**\n   * Set Composite element type `view` at `index`\n   */\n  set(index, view) {\n    if (index >= this._length) {\n      throw Error(`Error setting index over length ${index} > ${this._length}`);\n    }\n    // When setting a view:\n    // - Not necessary to commit node\n    // - Not necessary to persist cache\n    // Just keeping a reference to the view in this.viewsChanged ensures consistency\n    this.viewsChanged.set(index, view);\n  }\n  /**\n   * WARNING: Returns all commited changes, if there are any pending changes commit them beforehand\n   */\n  getAllReadonly() {\n    this.populateAllNodes();\n    const views = new Array(this._length);\n    for (let i = 0; i < this._length; i++) {\n      views[i] = this.type.elementType.getViewDU(this.nodes[i], this.caches[i]);\n    }\n    return views;\n  }\n  /**\n   * WARNING: Returns all commited changes, if there are any pending changes commit them beforehand\n   */\n  getAllReadonlyValues() {\n    this.populateAllNodes();\n    const values = new Array(this._length);\n    for (let i = 0; i < this._length; i++) {\n      values[i] = this.type.elementType.tree_toValue(this.nodes[i]);\n    }\n    return values;\n  }\n  commit() {\n    if (this.viewsChanged.size === 0) {\n      return;\n    }\n    const nodesChanged = [];\n    for (const [index, view] of this.viewsChanged) {\n      const node = this.type.elementType.commitViewDU(view);\n      // Set new node in nodes array to ensure data represented in the tree and fast nodes access is equal\n      this.nodes[index] = node;\n      nodesChanged.push({\n        index,\n        node\n      });\n      // Cache the view's caches to preserve it's data after 'this.viewsChanged.clear()'\n      const cache = this.type.elementType.cacheOfViewDU(view);\n      if (cache) this.caches[index] = cache;\n    }\n    // TODO: Optimize to loop only once, Numerical sort ascending\n    const nodesChangedSorted = nodesChanged.sort((a, b) => a.index - b.index);\n    const indexes = nodesChangedSorted.map(entry => entry.index);\n    const nodes = nodesChangedSorted.map(entry => entry.node);\n    const chunksNode = this.type.tree_getChunksNode(this._rootNode);\n    // TODO: Ensure fast setNodesAtDepth() method is correct\n    const newChunksNode = persistent_merkle_tree_1.setNodesAtDepth(chunksNode, this.type.chunkDepth, indexes, nodes);\n    this._rootNode = this.type.tree_setChunksNode(this._rootNode, newChunksNode, this.dirtyLength ? this._length : undefined);\n    this.viewsChanged.clear();\n    this.dirtyLength = false;\n  }\n  clearCache() {\n    this.nodes = [];\n    this.caches = [];\n    this.nodesPopulated = false;\n    // It's not necessary to clear this.viewsChanged since they have no effect on the cache.\n    // However preserving _SOME_ caches results in a very unpredictable experience.\n    this.viewsChanged.clear();\n    // Reset cached length only if it has been mutated\n    if (this.dirtyLength) {\n      this._length = this.type.tree_getLength(this._rootNode);\n      this.dirtyLength = false;\n    }\n  }\n  populateAllNodes() {\n    // If there's uncommited changes it may break.\n    // this.length can be increased but this._rootNode doesn't have that item\n    if (this.viewsChanged.size > 0) {\n      throw Error(\"Must commit changes before reading all nodes\");\n    }\n    if (!this.nodesPopulated) {\n      this.nodes = persistent_merkle_tree_1.getNodesAtDepth(this._rootNode, this.type.depth, 0, this.length);\n      this.nodesPopulated = true;\n    }\n  }\n}\nexports.ArrayCompositeTreeViewDU = ArrayCompositeTreeViewDU;","map":{"version":3,"names":["persistent_merkle_tree_1","require","abstract_1","ArrayCompositeTreeViewDU","TreeViewDU","constructor","type","_rootNode","cache","viewsChanged","Map","dirtyLength","nodes","caches","_length","length","nodesPopulated","tree_getLength","node","get","index","viewChanged","undefined","getNodeAtDepth","depth","view","elementType","getViewDU","isViewMutable","set","getReadonly","Error","getAllReadonly","populateAllNodes","views","Array","i","getAllReadonlyValues","values","tree_toValue","commit","size","nodesChanged","commitViewDU","push","cacheOfViewDU","nodesChangedSorted","sort","a","b","indexes","map","entry","chunksNode","tree_getChunksNode","newChunksNode","setNodesAtDepth","chunkDepth","tree_setChunksNode","clear","clearCache","getNodesAtDepth","exports"],"sources":["../../src/viewDU/arrayComposite.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}