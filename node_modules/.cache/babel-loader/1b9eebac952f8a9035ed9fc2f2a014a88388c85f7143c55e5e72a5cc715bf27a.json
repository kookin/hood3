{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBasicType = exports.BasicType = void 0;\nconst abstract_1 = require(\"./abstract\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * Represents a basic type as defined in the spec:\n * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#basic-types\n */\nclass BasicType extends abstract_1.Type {\n  constructor() {\n    super(...arguments);\n    this.isBasic = true;\n    // Basic types merkleize to exactly one chunk, thus depth of 0\n    this.depth = 0;\n    // Basic types merkleize to exactly one chunk\n    this.maxChunkCount = 1;\n  }\n  value_serializedSize() {\n    return this.byteLength;\n  }\n  tree_serializedSize() {\n    return this.byteLength;\n  }\n  assertValidSize(size) {\n    if (size !== this.byteLength) {\n      throw Error(`BasicType invalid size ${size} expected ${this.byteLength}`);\n    }\n  }\n  hashTreeRoot(value) {\n    // TODO: Optimize\n    const uint8Array = new Uint8Array(32);\n    const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n    this.value_serializeToBytes({\n      uint8Array,\n      dataView\n    }, 0, value);\n    return uint8Array;\n  }\n  clone(value) {\n    // All basic types are represented by primitive Javascript types, don't require clone\n    return value;\n  }\n  equals(a, b) {\n    // All basic types are represented by primitive Javascript types, the operator === is sufficient\n    return a === b;\n  }\n}\nexports.BasicType = BasicType;\nfunction isBasicType(type) {\n  return type.isBasic;\n}\nexports.isBasicType = isBasicType;","map":{"version":3,"names":["abstract_1","require","BasicType","Type","constructor","isBasic","depth","maxChunkCount","value_serializedSize","byteLength","tree_serializedSize","assertValidSize","size","Error","hashTreeRoot","value","uint8Array","Uint8Array","dataView","DataView","buffer","byteOffset","value_serializeToBytes","clone","equals","a","b","exports","isBasicType","type"],"sources":["../../src/type/basic.ts"],"sourcesContent":[null],"mappings":";;;;;;AACA,MAAAA,UAAA,GAAAC,OAAA;AAEA;AAEA;;;;AAIA,MAAsBC,SAAa,SAAQF,UAAA,CAAAG,IAAO;EAAlDC,YAAA;;IACW,KAAAC,OAAO,GAAG,IAAI;IACvB;IACS,KAAAC,KAAK,GAAG,CAAC;IAClB;IACS,KAAAC,aAAa,GAAG,CAAC;EA2C5B;EAxCEC,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAACC,UAAU;EACxB;EAEAC,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACD,UAAU;EACxB;EAEUE,eAAeA,CAACC,IAAY;IACpC,IAAIA,IAAI,KAAK,IAAI,CAACH,UAAU,EAAE;MAC5B,MAAMI,KAAK,CAAC,0BAA0BD,IAAI,aAAa,IAAI,CAACH,UAAU,EAAE,CAAC;;EAE7E;EAEAK,YAAYA,CAACC,KAAQ;IACnB;IACA,MAAMC,UAAU,GAAG,IAAIC,UAAU,CAAC,EAAE,CAAC;IACrC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAACH,UAAU,CAACI,MAAM,EAAEJ,UAAU,CAACK,UAAU,EAAEL,UAAU,CAACP,UAAU,CAAC;IAC9F,IAAI,CAACa,sBAAsB,CAAC;MAACN,UAAU;MAAEE;IAAQ,CAAC,EAAE,CAAC,EAAEH,KAAK,CAAC;IAC7D,OAAOC,UAAU;EACnB;EAEAO,KAAKA,CAACR,KAAQ;IACZ;IACA,OAAOA,KAAK;EACd;EAEAS,MAAMA,CAACC,CAAI,EAAEC,CAAI;IACf;IACA,OAAOD,CAAC,KAAKC,CAAC;EAChB;;AAtCFC,OAAA,CAAAzB,SAAA,GAAAA,SAAA;AAkDA,SAAgB0B,WAAWA,CAAIC,IAAa;EAC1C,OAAOA,IAAI,CAACxB,OAAO;AACrB;AAFAsB,OAAA,CAAAC,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}