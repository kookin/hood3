{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListCompositeTreeViewDU = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst arrayComposite_1 = require(\"./arrayComposite\");\nclass ListCompositeTreeViewDU extends arrayComposite_1.ArrayCompositeTreeViewDU {\n  constructor(type, _rootNode, cache) {\n    super(type, _rootNode, cache);\n    this.type = type;\n    this._rootNode = _rootNode;\n  }\n  /**\n   * Adds one value element at the end of the array and adds 1 to the un-commited ViewDU length\n   */\n  push(view) {\n    if (this._length >= this.type.limit) {\n      throw Error(\"Error pushing over limit\");\n    }\n    this.dirtyLength = true;\n    const index = this._length++;\n    // No need for pre-initialization like in ListBasic.push since ArrayCompositeTreeViewDU.set() doesn't do a get node\n    this.set(index, view);\n  }\n  /**\n   * Returns a new ListCompositeTreeViewDU instance with the values from 0 to `index`.\n   * The new list is equivalent to (pseudo-code):\n   *\n   * ```ts\n   * const nodes = getChunkNodes()\n   * return listFromChunkNodes(nodes.slice(0, index + 1))\n   * ```\n   *\n   * To achieve it, rebinds the underlying tree zero-ing all nodes right of `index`.\n   *\n   * Note: Using index = -1, returns an empty list of length 0.\n   */\n  sliceTo(index) {\n    // Commit before getting rootNode to ensure all pending data is in the rootNode\n    this.commit();\n    const rootNode = this._rootNode;\n    const length = this.type.tree_getLength(rootNode);\n    // All nodes beyond length are already zero\n    // Array of length 2: [X,X,0,0], for index >= 1 no action needed\n    if (index >= length - 1) {\n      return this;\n    }\n    // Since this is a List, do the treeZeroAfterIndex operation on the chunks tree\n    const chunksNode = this.type.tree_getChunksNode(rootNode);\n    const newChunksNode = persistent_merkle_tree_1.treeZeroAfterIndex(chunksNode, this.type.chunkDepth, index);\n    // Must set new length and commit to tree to restore the same tree at that index\n    const newLength = index + 1;\n    const newRootNode = this.type.tree_setChunksNode(rootNode, newChunksNode, newLength);\n    return this.type.getViewDU(newRootNode);\n  }\n}\nexports.ListCompositeTreeViewDU = ListCompositeTreeViewDU;","map":{"version":3,"names":["persistent_merkle_tree_1","require","arrayComposite_1","ListCompositeTreeViewDU","ArrayCompositeTreeViewDU","constructor","type","_rootNode","cache","push","view","_length","limit","Error","dirtyLength","index","set","sliceTo","commit","rootNode","length","tree_getLength","chunksNode","tree_getChunksNode","newChunksNode","treeZeroAfterIndex","chunkDepth","newLength","newRootNode","tree_setChunksNode","getViewDU","exports"],"sources":["../../src/viewDU/listComposite.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,wBAAA,GAAAC,OAAA;AAIA,MAAAC,gBAAA,GAAAD,OAAA;AAEA,MAAaE,uBAEX,SAAQD,gBAAA,CAAAE,wBAAqC;EAC7CC,YACWC,IAAoC,EACnCC,SAAe,EACzBC,KAAqC;IAErC,KAAK,CAACF,IAAI,EAAEC,SAAS,EAAEC,KAAK,CAAC;IAJpB,KAAAF,IAAI,GAAJA,IAAI;IACH,KAAAC,SAAS,GAATA,SAAS;EAIrB;EAEA;;;EAGAE,IAAIA,CAACC,IAAkC;IACrC,IAAI,IAAI,CAACC,OAAO,IAAI,IAAI,CAACL,IAAI,CAACM,KAAK,EAAE;MACnC,MAAMC,KAAK,CAAC,0BAA0B,CAAC;;IAGzC,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,MAAMC,KAAK,GAAG,IAAI,CAACJ,OAAO,EAAE;IAC5B;IACA,IAAI,CAACK,GAAG,CAACD,KAAK,EAAEL,IAAI,CAAC;EACvB;EAEA;;;;;;;;;;;;;EAaAO,OAAOA,CAACF,KAAa;IACnB;IACA,IAAI,CAACG,MAAM,EAAE;IACb,MAAMC,QAAQ,GAAG,IAAI,CAACZ,SAAS;IAC/B,MAAMa,MAAM,GAAG,IAAI,CAACd,IAAI,CAACe,cAAc,CAACF,QAAQ,CAAC;IAEjD;IACA;IACA,IAAIJ,KAAK,IAAIK,MAAM,GAAG,CAAC,EAAE;MACvB,OAAO,IAAI;;IAGb;IACA,MAAME,UAAU,GAAG,IAAI,CAAChB,IAAI,CAACiB,kBAAkB,CAACJ,QAAQ,CAAC;IACzD,MAAMK,aAAa,GAAGxB,wBAAA,CAAAyB,kBAAkB,CAACH,UAAU,EAAE,IAAI,CAAChB,IAAI,CAACoB,UAAU,EAAEX,KAAK,CAAC;IAEjF;IACA,MAAMY,SAAS,GAAGZ,KAAK,GAAG,CAAC;IAC3B,MAAMa,WAAW,GAAG,IAAI,CAACtB,IAAI,CAACuB,kBAAkB,CAACV,QAAQ,EAAEK,aAAa,EAAEG,SAAS,CAAC;IAEpF,OAAO,IAAI,CAACrB,IAAI,CAACwB,SAAS,CAACF,WAAW,CAAS;EACjD;;AA3DFG,OAAA,CAAA5B,uBAAA,GAAAA,uBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}