{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _StandardWalletAdapter_instances, _StandardWalletAdapter_account, _StandardWalletAdapter_publicKey, _StandardWalletAdapter_connecting, _StandardWalletAdapter_disconnecting, _StandardWalletAdapter_off, _StandardWalletAdapter_wallet, _StandardWalletAdapter_supportedTransactionVersions, _StandardWalletAdapter_readyState, _StandardWalletAdapter_connected, _StandardWalletAdapter_disconnected, _StandardWalletAdapter_changed, _StandardWalletAdapter_signTransaction, _StandardWalletAdapter_signAllTransactions, _StandardWalletAdapter_signMessage;\nimport { BaseWalletAdapter, isVersionedTransaction, WalletAccountError, WalletConfigError, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletError, WalletNotConnectedError, WalletNotReadyError, WalletPublicKeyError, WalletReadyState, WalletSendTransactionError, WalletSignMessageError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { SolanaSignAndSendTransaction, SolanaSignMessage, SolanaSignTransaction } from '@solana/wallet-standard-features';\nimport { getChainForEndpoint, getCommitment } from '@solana/wallet-standard-util';\nimport { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { StandardConnect, StandardDisconnect, StandardEvents } from '@wallet-standard/features';\nimport { arraysEqual } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\n/** TODO: docs */\nexport class StandardWalletAdapter extends BaseWalletAdapter {\n  constructor(_ref) {\n    let {\n      wallet\n    } = _ref;\n    super();\n    _StandardWalletAdapter_instances.add(this);\n    _StandardWalletAdapter_account.set(this, void 0);\n    _StandardWalletAdapter_publicKey.set(this, void 0);\n    _StandardWalletAdapter_connecting.set(this, void 0);\n    _StandardWalletAdapter_disconnecting.set(this, void 0);\n    _StandardWalletAdapter_off.set(this, void 0);\n    _StandardWalletAdapter_wallet.set(this, void 0);\n    _StandardWalletAdapter_supportedTransactionVersions.set(this, void 0);\n    _StandardWalletAdapter_readyState.set(this, typeof window === 'undefined' || typeof document === 'undefined' ? WalletReadyState.Unsupported : WalletReadyState.Installed);\n    _StandardWalletAdapter_changed.set(this, properties => {\n      // If the adapter is disconnecting, or isn't connected, or the change doesn't include accounts, do nothing.\n      if (__classPrivateFieldGet(this, _StandardWalletAdapter_disconnecting, \"f\") || !__classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\") || !__classPrivateFieldGet(this, _StandardWalletAdapter_publicKey, \"f\") || !('accounts' in properties)) return;\n      const account = __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts[0];\n      // If there's no connected account, disconnect the adapter.\n      if (!account) {\n        __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n        this.emit('error', new WalletDisconnectedError());\n        this.emit('disconnect');\n        return;\n      }\n      // If the account hasn't actually changed, do nothing.\n      if (account === __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\")) return;\n      let publicKey;\n      // If the account public key isn't valid, disconnect the adapter.\n      try {\n        publicKey = new PublicKey(account.publicKey);\n      } catch (error) {\n        __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n        this.emit('error', new WalletPublicKeyError(error?.message));\n        this.emit('disconnect');\n        return;\n      }\n      // Change the adapter's account and public key and emit an event.\n      __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, account, publicKey);\n      this.emit('connect', publicKey);\n    });\n    __classPrivateFieldSet(this, _StandardWalletAdapter_wallet, wallet, \"f\");\n    const supportedTransactionVersions = SolanaSignAndSendTransaction in wallet.features ? wallet.features[SolanaSignAndSendTransaction].supportedTransactionVersions : wallet.features[SolanaSignTransaction].supportedTransactionVersions;\n    __classPrivateFieldSet(this, _StandardWalletAdapter_supportedTransactionVersions, arraysEqual(supportedTransactionVersions, ['legacy']) ? null : new Set(supportedTransactionVersions), \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_account, null, \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_publicKey, null, \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, false, \"f\");\n    __classPrivateFieldSet(this, _StandardWalletAdapter_disconnecting, false, \"f\");\n  }\n  get supportedTransactionVersions() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_supportedTransactionVersions, \"f\");\n  }\n  get name() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").name;\n  }\n  get icon() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").icon;\n  }\n  get url() {\n    return 'https://github.com/solana-labs/wallet-standard';\n  }\n  get publicKey() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_publicKey, \"f\");\n  }\n  get connecting() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_connecting, \"f\");\n  }\n  get readyState() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_readyState, \"f\");\n  }\n  get wallet() {\n    return __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\");\n  }\n  get standard() {\n    return true;\n  }\n  async connect() {\n    try {\n      if (this.connected || this.connecting) return;\n      if (__classPrivateFieldGet(this, _StandardWalletAdapter_readyState, \"f\") !== WalletReadyState.Installed) throw new WalletNotReadyError();\n      __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, true, \"f\");\n      if (!__classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts.length) {\n        try {\n          await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[StandardConnect].connect();\n        } catch (error) {\n          throw new WalletConnectionError(error?.message, error);\n        }\n      }\n      if (!__classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts.length) throw new WalletAccountError();\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const account = __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").accounts[0];\n      let publicKey;\n      try {\n        publicKey = new PublicKey(account.publicKey);\n      } catch (error) {\n        throw new WalletPublicKeyError(error?.message, error);\n      }\n      __classPrivateFieldSet(this, _StandardWalletAdapter_off, __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[StandardEvents].on('change', __classPrivateFieldGet(this, _StandardWalletAdapter_changed, \"f\")), \"f\");\n      __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, account, publicKey);\n      this.emit('connect', publicKey);\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    } finally {\n      __classPrivateFieldSet(this, _StandardWalletAdapter_connecting, false, \"f\");\n    }\n  }\n  async disconnect() {\n    if (StandardDisconnect in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n      try {\n        __classPrivateFieldSet(this, _StandardWalletAdapter_disconnecting, true, \"f\");\n        await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[StandardDisconnect].disconnect();\n      } catch (error) {\n        this.emit('error', new WalletDisconnectionError(error?.message, error));\n      } finally {\n        __classPrivateFieldSet(this, _StandardWalletAdapter_disconnecting, false, \"f\");\n      }\n    }\n    __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_disconnected).call(this);\n    this.emit('disconnect');\n  }\n  async sendTransaction(transaction, connection) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    try {\n      const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n      if (!account) throw new WalletNotConnectedError();\n      let feature;\n      if (SolanaSignAndSendTransaction in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n        if (account.features.includes(SolanaSignAndSendTransaction)) {\n          feature = SolanaSignAndSendTransaction;\n        } else if (SolanaSignTransaction in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features && account.features.includes(SolanaSignTransaction)) {\n          feature = SolanaSignTransaction;\n        } else {\n          throw new WalletAccountError();\n        }\n      } else if (SolanaSignTransaction in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features) {\n        if (!account.features.includes(SolanaSignTransaction)) throw new WalletAccountError();\n        feature = SolanaSignTransaction;\n      } else {\n        throw new WalletConfigError();\n      }\n      const chain = getChainForEndpoint(connection.rpcEndpoint);\n      if (!account.chains.includes(chain)) throw new WalletSendTransactionError();\n      try {\n        const {\n          signers,\n          ...sendOptions\n        } = options;\n        let serializedTransaction;\n        if (isVersionedTransaction(transaction)) {\n          signers?.length && transaction.sign(signers);\n          serializedTransaction = transaction.serialize();\n        } else {\n          transaction = await this.prepareTransaction(transaction, connection, sendOptions);\n          signers?.length && transaction.partialSign(...signers);\n          serializedTransaction = new Uint8Array(transaction.serialize({\n            requireAllSignatures: false,\n            verifySignatures: false\n          }));\n        }\n        if (feature === SolanaSignAndSendTransaction) {\n          const [output] = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[SolanaSignAndSendTransaction].signAndSendTransaction({\n            account,\n            chain,\n            transaction: serializedTransaction,\n            options: {\n              preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n              skipPreflight: sendOptions.skipPreflight,\n              maxRetries: sendOptions.maxRetries,\n              minContextSlot: sendOptions.minContextSlot\n            }\n          });\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          return bs58.encode(output.signature);\n        } else {\n          const [output] = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[SolanaSignTransaction].signTransaction({\n            account,\n            chain,\n            transaction: serializedTransaction,\n            options: {\n              preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n              minContextSlot: sendOptions.minContextSlot\n            }\n          });\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          return await connection.sendRawTransaction(output.signedTransaction, {\n            ...sendOptions,\n            preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment)\n          });\n        }\n      } catch (error) {\n        if (error instanceof WalletError) throw error;\n        throw new WalletSendTransactionError(error?.message, error);\n      }\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n}\n_StandardWalletAdapter_account = new WeakMap(), _StandardWalletAdapter_publicKey = new WeakMap(), _StandardWalletAdapter_connecting = new WeakMap(), _StandardWalletAdapter_disconnecting = new WeakMap(), _StandardWalletAdapter_off = new WeakMap(), _StandardWalletAdapter_wallet = new WeakMap(), _StandardWalletAdapter_supportedTransactionVersions = new WeakMap(), _StandardWalletAdapter_readyState = new WeakMap(), _StandardWalletAdapter_changed = new WeakMap(), _StandardWalletAdapter_instances = new WeakSet(), _StandardWalletAdapter_connected = function _StandardWalletAdapter_connected(account, publicKey) {\n  __classPrivateFieldSet(this, _StandardWalletAdapter_account, account, \"f\");\n  __classPrivateFieldSet(this, _StandardWalletAdapter_publicKey, publicKey, \"f\");\n  if (account?.features.includes(SolanaSignTransaction)) {\n    this.signTransaction = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signTransaction);\n    this.signAllTransactions = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signAllTransactions);\n  } else {\n    delete this.signTransaction;\n    delete this.signAllTransactions;\n  }\n  if (account?.features.includes(SolanaSignMessage)) {\n    this.signMessage = __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_signMessage);\n  } else {\n    delete this.signMessage;\n  }\n}, _StandardWalletAdapter_disconnected = function _StandardWalletAdapter_disconnected() {\n  const off = __classPrivateFieldGet(this, _StandardWalletAdapter_off, \"f\");\n  if (off) {\n    __classPrivateFieldSet(this, _StandardWalletAdapter_off, undefined, \"f\");\n    off();\n  }\n  __classPrivateFieldGet(this, _StandardWalletAdapter_instances, \"m\", _StandardWalletAdapter_connected).call(this, null, null);\n}, _StandardWalletAdapter_signTransaction = async function _StandardWalletAdapter_signTransaction(transaction) {\n  try {\n    const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n    if (!account) throw new WalletNotConnectedError();\n    if (!(SolanaSignTransaction in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) throw new WalletConfigError();\n    if (!account.features.includes(SolanaSignTransaction)) throw new WalletAccountError();\n    try {\n      const signedTransactions = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[SolanaSignTransaction].signTransaction({\n        account,\n        transaction: isVersionedTransaction(transaction) ? transaction.serialize() : new Uint8Array(transaction.serialize({\n          requireAllSignatures: false,\n          verifySignatures: false\n        }))\n      });\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const serializedTransaction = signedTransactions[0].signedTransaction;\n      return isVersionedTransaction(transaction) ? VersionedTransaction.deserialize(serializedTransaction) : Transaction.from(serializedTransaction);\n    } catch (error) {\n      if (error instanceof WalletError) throw error;\n      throw new WalletSignTransactionError(error?.message, error);\n    }\n  } catch (error) {\n    this.emit('error', error);\n    throw error;\n  }\n}, _StandardWalletAdapter_signAllTransactions = async function _StandardWalletAdapter_signAllTransactions(transactions) {\n  try {\n    const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n    if (!account) throw new WalletNotConnectedError();\n    if (!(SolanaSignTransaction in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) throw new WalletConfigError();\n    if (!account.features.includes(SolanaSignTransaction)) throw new WalletSignTransactionError();\n    try {\n      const signedTransactions = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[SolanaSignTransaction].signTransaction(...transactions.map(transaction => ({\n        account,\n        transaction: isVersionedTransaction(transaction) ? transaction.serialize() : new Uint8Array(transaction.serialize({\n          requireAllSignatures: false,\n          verifySignatures: false\n        }))\n      })));\n      return transactions.map((transaction, index) => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const signedTransaction = signedTransactions[index].signedTransaction;\n        return isVersionedTransaction(transaction) ? VersionedTransaction.deserialize(signedTransaction) : Transaction.from(signedTransaction);\n      });\n    } catch (error) {\n      throw new WalletSignTransactionError(error?.message, error);\n    }\n  } catch (error) {\n    this.emit('error', error);\n    throw error;\n  }\n}, _StandardWalletAdapter_signMessage = async function _StandardWalletAdapter_signMessage(message) {\n  try {\n    const account = __classPrivateFieldGet(this, _StandardWalletAdapter_account, \"f\");\n    if (!account) throw new WalletNotConnectedError();\n    if (!(SolanaSignMessage in __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features)) throw new WalletConfigError();\n    if (!account.features.includes(SolanaSignMessage)) throw new WalletSignMessageError();\n    try {\n      const signedMessages = await __classPrivateFieldGet(this, _StandardWalletAdapter_wallet, \"f\").features[SolanaSignMessage].signMessage({\n        account,\n        message\n      });\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return signedMessages[0].signature;\n    } catch (error) {\n      throw new WalletSignMessageError(error?.message, error);\n    }\n  } catch (error) {\n    this.emit('error', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BaseWalletAdapter","isVersionedTransaction","WalletAccountError","WalletConfigError","WalletConnectionError","WalletDisconnectedError","WalletDisconnectionError","WalletError","WalletNotConnectedError","WalletNotReadyError","WalletPublicKeyError","WalletReadyState","WalletSendTransactionError","WalletSignMessageError","WalletSignTransactionError","SolanaSignAndSendTransaction","SolanaSignMessage","SolanaSignTransaction","getChainForEndpoint","getCommitment","PublicKey","Transaction","VersionedTransaction","StandardConnect","StandardDisconnect","StandardEvents","arraysEqual","bs58","StandardWalletAdapter","constructor","_ref","wallet","_StandardWalletAdapter_account","set","_StandardWalletAdapter_publicKey","_StandardWalletAdapter_connecting","_StandardWalletAdapter_disconnecting","_StandardWalletAdapter_off","_StandardWalletAdapter_wallet","_StandardWalletAdapter_supportedTransactionVersions","_StandardWalletAdapter_readyState","window","document","Unsupported","Installed","_StandardWalletAdapter_changed","properties","__classPrivateFieldGet","account","accounts","_StandardWalletAdapter_instances","_StandardWalletAdapter_disconnected","call","emit","publicKey","error","message","_StandardWalletAdapter_connected","__classPrivateFieldSet","supportedTransactionVersions","features","Set","name","icon","url","connecting","readyState","standard","connect","connected","length","on","disconnect","sendTransaction","transaction","connection","options","arguments","undefined","feature","includes","chain","rpcEndpoint","chains","signers","sendOptions","serializedTransaction","sign","serialize","prepareTransaction","partialSign","Uint8Array","requireAllSignatures","verifySignatures","output","signAndSendTransaction","preflightCommitment","commitment","skipPreflight","maxRetries","minContextSlot","encode","signature","signTransaction","sendRawTransaction","signedTransaction","_StandardWalletAdapter_signTransaction","signAllTransactions","_StandardWalletAdapter_signAllTransactions","signMessage","_StandardWalletAdapter_signMessage","off","signedTransactions","deserialize","from","transactions","map","index","signedMessages"],"sources":["/hood3/node_modules/@solana/wallet-standard-wallet-adapter-react/node_modules/@solana/wallet-standard-wallet-adapter-base/src/adapter.ts"],"sourcesContent":["import {\n    BaseWalletAdapter,\n    isVersionedTransaction,\n    type SendTransactionOptions,\n    type StandardWalletAdapter as StandardWalletAdapterType,\n    type SupportedTransactionVersions,\n    WalletAccountError,\n    type WalletAdapterCompatibleStandardWallet,\n    WalletConfigError,\n    WalletConnectionError,\n    WalletDisconnectedError,\n    WalletDisconnectionError,\n    WalletError,\n    type WalletName,\n    WalletNotConnectedError,\n    WalletNotReadyError,\n    WalletPublicKeyError,\n    WalletReadyState,\n    WalletSendTransactionError,\n    WalletSignMessageError,\n    WalletSignTransactionError,\n} from '@solana/wallet-adapter-base';\nimport {\n    SolanaSignAndSendTransaction,\n    type SolanaSignAndSendTransactionFeature,\n    SolanaSignMessage,\n    SolanaSignTransaction,\n    type SolanaSignTransactionFeature,\n} from '@solana/wallet-standard-features';\nimport { getChainForEndpoint, getCommitment } from '@solana/wallet-standard-util';\nimport type { Connection, TransactionSignature } from '@solana/web3.js';\nimport { PublicKey, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport type { WalletAccount } from '@wallet-standard/base';\nimport {\n    StandardConnect,\n    StandardDisconnect,\n    StandardEvents,\n    type StandardEventsListeners,\n} from '@wallet-standard/features';\nimport { arraysEqual } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\n\n/** TODO: docs */\nexport interface StandardWalletAdapterConfig {\n    wallet: WalletAdapterCompatibleStandardWallet;\n}\n\n/** TODO: docs */\nexport class StandardWalletAdapter extends BaseWalletAdapter implements StandardWalletAdapterType {\n    #account: WalletAccount | null;\n    #publicKey: PublicKey | null;\n    #connecting: boolean;\n    #disconnecting: boolean;\n    #off: (() => void) | undefined;\n    readonly #wallet: WalletAdapterCompatibleStandardWallet;\n    readonly #supportedTransactionVersions: SupportedTransactionVersions;\n    readonly #readyState: WalletReadyState =\n        typeof window === 'undefined' || typeof document === 'undefined'\n            ? WalletReadyState.Unsupported\n            : WalletReadyState.Installed;\n\n    get supportedTransactionVersions() {\n        return this.#supportedTransactionVersions;\n    }\n\n    get name() {\n        return this.#wallet.name as WalletName;\n    }\n\n    get icon() {\n        return this.#wallet.icon;\n    }\n\n    get url() {\n        return 'https://github.com/solana-labs/wallet-standard';\n    }\n\n    get publicKey() {\n        return this.#publicKey;\n    }\n\n    get connecting() {\n        return this.#connecting;\n    }\n\n    get readyState() {\n        return this.#readyState;\n    }\n\n    get wallet(): WalletAdapterCompatibleStandardWallet {\n        return this.#wallet;\n    }\n\n    get standard() {\n        return true as const;\n    }\n\n    constructor({ wallet }: StandardWalletAdapterConfig) {\n        super();\n        this.#wallet = wallet;\n\n        const supportedTransactionVersions =\n            SolanaSignAndSendTransaction in wallet.features\n                ? wallet.features[SolanaSignAndSendTransaction].supportedTransactionVersions\n                : wallet.features[SolanaSignTransaction].supportedTransactionVersions;\n        this.#supportedTransactionVersions = arraysEqual(supportedTransactionVersions, ['legacy'])\n            ? null\n            : new Set(supportedTransactionVersions);\n\n        this.#account = null;\n        this.#publicKey = null;\n        this.#connecting = false;\n        this.#disconnecting = false;\n    }\n\n    async connect(): Promise<void> {\n        try {\n            if (this.connected || this.connecting) return;\n            if (this.#readyState !== WalletReadyState.Installed) throw new WalletNotReadyError();\n\n            this.#connecting = true;\n\n            if (!this.#wallet.accounts.length) {\n                try {\n                    await this.#wallet.features[StandardConnect].connect();\n                } catch (error: any) {\n                    throw new WalletConnectionError(error?.message, error);\n                }\n            }\n\n            if (!this.#wallet.accounts.length) throw new WalletAccountError();\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const account = this.#wallet.accounts[0]!;\n\n            let publicKey: PublicKey;\n            try {\n                publicKey = new PublicKey(account.publicKey);\n            } catch (error: any) {\n                throw new WalletPublicKeyError(error?.message, error);\n            }\n\n            this.#off = this.#wallet.features[StandardEvents].on('change', this.#changed);\n            this.#connected(account, publicKey);\n            this.emit('connect', publicKey);\n        } catch (error: any) {\n            this.emit('error', error);\n            throw error;\n        } finally {\n            this.#connecting = false;\n        }\n    }\n\n    async disconnect(): Promise<void> {\n        if (StandardDisconnect in this.#wallet.features) {\n            try {\n                this.#disconnecting = true;\n                await this.#wallet.features[StandardDisconnect].disconnect();\n            } catch (error: any) {\n                this.emit('error', new WalletDisconnectionError(error?.message, error));\n            } finally {\n                this.#disconnecting = false;\n            }\n        }\n\n        this.#disconnected();\n        this.emit('disconnect');\n    }\n\n    #connected(account: WalletAccount, publicKey: PublicKey): void;\n    #connected(account: null, publicKey: null): void;\n    #connected(account: WalletAccount | null, publicKey: PublicKey | null) {\n        this.#account = account;\n        this.#publicKey = publicKey;\n\n        if (account?.features.includes(SolanaSignTransaction)) {\n            this.signTransaction = this.#signTransaction;\n            this.signAllTransactions = this.#signAllTransactions;\n        } else {\n            delete this.signTransaction;\n            delete this.signAllTransactions;\n        }\n\n        if (account?.features.includes(SolanaSignMessage)) {\n            this.signMessage = this.#signMessage;\n        } else {\n            delete this.signMessage;\n        }\n    }\n\n    #disconnected(): void {\n        const off = this.#off;\n        if (off) {\n            this.#off = undefined;\n            off();\n        }\n\n        this.#connected(null, null);\n    }\n\n    #changed: StandardEventsListeners['change'] = (properties) => {\n        // If the adapter is disconnecting, or isn't connected, or the change doesn't include accounts, do nothing.\n        if (this.#disconnecting || !this.#account || !this.#publicKey || !('accounts' in properties)) return;\n\n        const account = this.#wallet.accounts[0];\n        // If there's no connected account, disconnect the adapter.\n        if (!account) {\n            this.#disconnected();\n            this.emit('error', new WalletDisconnectedError());\n            this.emit('disconnect');\n            return;\n        }\n\n        // If the account hasn't actually changed, do nothing.\n        if (account === this.#account) return;\n\n        let publicKey: PublicKey;\n        // If the account public key isn't valid, disconnect the adapter.\n        try {\n            publicKey = new PublicKey(account.publicKey);\n        } catch (error: any) {\n            this.#disconnected();\n            this.emit('error', new WalletPublicKeyError(error?.message));\n            this.emit('disconnect');\n            return;\n        }\n\n        // Change the adapter's account and public key and emit an event.\n        this.#connected(account, publicKey);\n        this.emit('connect', publicKey);\n    };\n\n    async sendTransaction<T extends Transaction | VersionedTransaction>(\n        transaction: T,\n        connection: Connection,\n        options: SendTransactionOptions = {}\n    ): Promise<TransactionSignature> {\n        try {\n            const account = this.#account;\n            if (!account) throw new WalletNotConnectedError();\n\n            let feature: typeof SolanaSignAndSendTransaction | typeof SolanaSignTransaction;\n            if (SolanaSignAndSendTransaction in this.#wallet.features) {\n                if (account.features.includes(SolanaSignAndSendTransaction)) {\n                    feature = SolanaSignAndSendTransaction;\n                } else if (\n                    SolanaSignTransaction in this.#wallet.features &&\n                    account.features.includes(SolanaSignTransaction)\n                ) {\n                    feature = SolanaSignTransaction;\n                } else {\n                    throw new WalletAccountError();\n                }\n            } else if (SolanaSignTransaction in this.#wallet.features) {\n                if (!account.features.includes(SolanaSignTransaction)) throw new WalletAccountError();\n                feature = SolanaSignTransaction;\n            } else {\n                throw new WalletConfigError();\n            }\n\n            const chain = getChainForEndpoint(connection.rpcEndpoint);\n            if (!account.chains.includes(chain)) throw new WalletSendTransactionError();\n\n            try {\n                const { signers, ...sendOptions } = options;\n\n                let serializedTransaction: Uint8Array;\n                if (isVersionedTransaction(transaction)) {\n                    signers?.length && transaction.sign(signers);\n                    serializedTransaction = transaction.serialize();\n                } else {\n                    transaction = (await this.prepareTransaction(transaction, connection, sendOptions)) as T;\n                    signers?.length && (transaction as Transaction).partialSign(...signers);\n                    serializedTransaction = new Uint8Array(\n                        (transaction as Transaction).serialize({\n                            requireAllSignatures: false,\n                            verifySignatures: false,\n                        })\n                    );\n                }\n\n                if (feature === SolanaSignAndSendTransaction) {\n                    const [output] = await (this.#wallet.features as SolanaSignAndSendTransactionFeature)[\n                        SolanaSignAndSendTransaction\n                    ].signAndSendTransaction({\n                        account,\n                        chain,\n                        transaction: serializedTransaction,\n                        options: {\n                            preflightCommitment: getCommitment(\n                                sendOptions.preflightCommitment || connection.commitment\n                            ),\n                            skipPreflight: sendOptions.skipPreflight,\n                            maxRetries: sendOptions.maxRetries,\n                            minContextSlot: sendOptions.minContextSlot,\n                        },\n                    });\n\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    return bs58.encode(output!.signature);\n                } else {\n                    const [output] = await (this.#wallet.features as SolanaSignTransactionFeature)[\n                        SolanaSignTransaction\n                    ].signTransaction({\n                        account,\n                        chain,\n                        transaction: serializedTransaction,\n                        options: {\n                            preflightCommitment: getCommitment(\n                                sendOptions.preflightCommitment || connection.commitment\n                            ),\n                            minContextSlot: sendOptions.minContextSlot,\n                        },\n                    });\n\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    return await connection.sendRawTransaction(output!.signedTransaction, {\n                        ...sendOptions,\n                        preflightCommitment: getCommitment(sendOptions.preflightCommitment || connection.commitment),\n                    });\n                }\n            } catch (error: any) {\n                if (error instanceof WalletError) throw error;\n                throw new WalletSendTransactionError(error?.message, error);\n            }\n        } catch (error: any) {\n            this.emit('error', error);\n            throw error;\n        }\n    }\n\n    signTransaction: (<T extends Transaction | VersionedTransaction>(transaction: T) => Promise<T>) | undefined;\n    async #signTransaction<T extends Transaction | VersionedTransaction>(transaction: T): Promise<T> {\n        try {\n            const account = this.#account;\n            if (!account) throw new WalletNotConnectedError();\n\n            if (!(SolanaSignTransaction in this.#wallet.features)) throw new WalletConfigError();\n            if (!account.features.includes(SolanaSignTransaction)) throw new WalletAccountError();\n\n            try {\n                const signedTransactions = await this.#wallet.features[SolanaSignTransaction].signTransaction({\n                    account,\n                    transaction: isVersionedTransaction(transaction)\n                        ? transaction.serialize()\n                        : new Uint8Array(\n                              transaction.serialize({\n                                  requireAllSignatures: false,\n                                  verifySignatures: false,\n                              })\n                          ),\n                });\n\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const serializedTransaction = signedTransactions[0]!.signedTransaction;\n\n                return (\n                    isVersionedTransaction(transaction)\n                        ? VersionedTransaction.deserialize(serializedTransaction)\n                        : Transaction.from(serializedTransaction)\n                ) as T;\n            } catch (error: any) {\n                if (error instanceof WalletError) throw error;\n                throw new WalletSignTransactionError(error?.message, error);\n            }\n        } catch (error: any) {\n            this.emit('error', error);\n            throw error;\n        }\n    }\n\n    signAllTransactions: (<T extends Transaction | VersionedTransaction>(transaction: T[]) => Promise<T[]>) | undefined;\n    async #signAllTransactions<T extends Transaction | VersionedTransaction>(transactions: T[]): Promise<T[]> {\n        try {\n            const account = this.#account;\n            if (!account) throw new WalletNotConnectedError();\n\n            if (!(SolanaSignTransaction in this.#wallet.features)) throw new WalletConfigError();\n            if (!account.features.includes(SolanaSignTransaction)) throw new WalletSignTransactionError();\n\n            try {\n                const signedTransactions = await this.#wallet.features[SolanaSignTransaction].signTransaction(\n                    ...transactions.map((transaction) => ({\n                        account,\n                        transaction: isVersionedTransaction(transaction)\n                            ? transaction.serialize()\n                            : new Uint8Array(\n                                  transaction.serialize({\n                                      requireAllSignatures: false,\n                                      verifySignatures: false,\n                                  })\n                              ),\n                    }))\n                );\n\n                return transactions.map((transaction, index) => {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    const signedTransaction = signedTransactions[index]!.signedTransaction;\n\n                    return (\n                        isVersionedTransaction(transaction)\n                            ? VersionedTransaction.deserialize(signedTransaction)\n                            : Transaction.from(signedTransaction)\n                    ) as T;\n                });\n            } catch (error: any) {\n                throw new WalletSignTransactionError(error?.message, error);\n            }\n        } catch (error: any) {\n            this.emit('error', error);\n            throw error;\n        }\n    }\n\n    signMessage: ((message: Uint8Array) => Promise<Uint8Array>) | undefined;\n    async #signMessage(message: Uint8Array): Promise<Uint8Array> {\n        try {\n            const account = this.#account;\n            if (!account) throw new WalletNotConnectedError();\n\n            if (!(SolanaSignMessage in this.#wallet.features)) throw new WalletConfigError();\n            if (!account.features.includes(SolanaSignMessage)) throw new WalletSignMessageError();\n\n            try {\n                const signedMessages = await this.#wallet.features[SolanaSignMessage].signMessage({\n                    account,\n                    message,\n                });\n\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                return signedMessages[0]!.signature;\n            } catch (error: any) {\n                throw new WalletSignMessageError(error?.message, error);\n            }\n        } catch (error: any) {\n            this.emit('error', error);\n            throw error;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}