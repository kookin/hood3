{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isCompositeType = exports.CompositeType = exports.LENGTH_GINDEX = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst byteArray_1 = require(\"../util/byteArray\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst treePostProcessFromProofNode_1 = require(\"../util/proof/treePostProcessFromProofNode\");\nconst abstract_1 = require(\"./abstract\");\nexports.LENGTH_GINDEX = BigInt(3);\n/** Dedicated property to cache hashTreeRoot of immutable CompositeType values */\nconst symbolCachedPermanentRoot = Symbol(\"ssz_cached_permanent_root\");\n/* eslint-disable @typescript-eslint/member-ordering  */\n/**\n * Represents a composite type as defined in the spec:\n * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#composite-types\n */\nclass CompositeType extends abstract_1.Type {\n  constructor(\n  /**\n   * Caches `hashTreeRoot()` result for struct values.\n   *\n   * WARNING: Must only be used for immutable values. The cached root is never discarded\n   */\n  cachePermanentRootStruct) {\n    super();\n    this.cachePermanentRootStruct = cachePermanentRootStruct;\n    this.isBasic = false;\n  }\n  /** New instance of a recursive zero'ed value converted to Tree View */\n  defaultView() {\n    return this.toView(this.defaultValue());\n  }\n  /** New instance of a recursive zero'ed value converted to Deferred Update Tree View */\n  defaultViewDU() {\n    return this.toViewDU(this.defaultValue());\n  }\n  /**\n   * Deserialize binary data to a Tree View.\n   * @see {@link CompositeType.getView}\n   */\n  deserializeToView(data) {\n    const dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n    const node = this.tree_deserializeFromBytes({\n      uint8Array: data,\n      dataView\n    }, 0, data.length);\n    return this.getView(new persistent_merkle_tree_1.Tree(node));\n  }\n  /**\n   * Deserialize binary data to a Deferred Update Tree View.\n   * @see {@link CompositeType.getViewDU}\n   */\n  deserializeToViewDU(data) {\n    const dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n    const node = this.tree_deserializeFromBytes({\n      uint8Array: data,\n      dataView\n    }, 0, data.length);\n    return this.getViewDU(node);\n  }\n  /**\n   * Transform value to a View.\n   * @see {@link CompositeType.getView}\n   */\n  toView(value) {\n    const node = this.value_toTree(value);\n    return this.getView(new persistent_merkle_tree_1.Tree(node));\n  }\n  /**\n   * Transform value to a ViewDU.\n   * @see {@link CompositeType.getViewDU}\n   */\n  toViewDU(value) {\n    const node = this.value_toTree(value);\n    return this.getViewDU(node);\n  }\n  /**\n   * Transform value to a View.\n   * @see {@link CompositeType.getView}\n   */\n  toValueFromView(view) {\n    const node = this.commitView(view);\n    return this.tree_toValue(node);\n  }\n  /**\n   * Transform value to a ViewDU.\n   * @see {@link CompositeType.getViewDU}\n   */\n  toValueFromViewDU(view) {\n    const node = this.commitViewDU(view);\n    return this.tree_toValue(node);\n  }\n  /**\n   * Transform a ViewDU to a View.\n   * @see {@link CompositeType.getView} and {@link CompositeType.getViewDU}\n   */\n  toViewFromViewDU(view) {\n    const node = this.commitViewDU(view);\n    return this.getView(new persistent_merkle_tree_1.Tree(node));\n  }\n  /**\n   * Transform a View to a ViewDU.\n   * @see {@link CompositeType.getView} and {@link CompositeType.getViewDU}\n   */\n  toViewDUFromView(view) {\n    const node = this.commitView(view);\n    return this.getViewDU(node);\n  }\n  // Merkleize API\n  hashTreeRoot(value) {\n    // Return cached mutable root if any\n    if (this.cachePermanentRootStruct) {\n      const cachedRoot = value[symbolCachedPermanentRoot];\n      if (cachedRoot) {\n        return cachedRoot;\n      }\n    }\n    const root = merkleize_1.merkleize(this.getRoots(value), this.maxChunkCount);\n    if (this.cachePermanentRootStruct) {\n      value[symbolCachedPermanentRoot] = root;\n    }\n    return root;\n  }\n  // For debugging and testing this feature\n  getCachedPermanentRoot(value) {\n    return value[symbolCachedPermanentRoot];\n  }\n  // Proofs API\n  /**\n   * Create a Tree View from a Proof. Verifies that the Proof is correct against `root`.\n   * @see {@link CompositeType.getView}\n   */\n  createFromProof(proof, root) {\n    const rootNodeFromProof = persistent_merkle_tree_1.Tree.createFromProof(proof).rootNode;\n    const rootNode = treePostProcessFromProofNode_1.treePostProcessFromProofNode(rootNodeFromProof, this);\n    if (root !== undefined && !byteArray_1.byteArrayEquals(rootNode.root, root)) {\n      throw new Error(\"Proof does not match trusted root\");\n    }\n    return this.getView(new persistent_merkle_tree_1.Tree(rootNode));\n  }\n  /** INTERNAL METHOD: For view's API, create proof from a tree */\n  tree_createProof(node, jsonPaths) {\n    const gindexes = this.tree_createProofGindexes(node, jsonPaths);\n    return persistent_merkle_tree_1.createProof(node, {\n      type: persistent_merkle_tree_1.ProofType.treeOffset,\n      gindices: gindexes\n    });\n  }\n  /** INTERNAL METHOD: For view's API, create proof from a tree */\n  tree_createProofGindexes(node, jsonPaths) {\n    const gindexes = [];\n    for (const jsonPath of jsonPaths) {\n      const {\n        type,\n        gindex\n      } = this.getPathInfo(jsonPath);\n      if (!isCompositeType(type)) {\n        gindexes.push(gindex);\n      } else {\n        // if the path subtype is composite, include the gindices of all the leaves\n        const leafGindexes = type.tree_getLeafGindices(gindex, type.fixedSize === null ? persistent_merkle_tree_1.getNode(node, gindex) : undefined);\n        for (const gindex of leafGindexes) {\n          gindexes.push(gindex);\n        }\n      }\n    }\n    return gindexes;\n  }\n  /**\n   * Navigate to a subtype & gindex using a path\n   */\n  getPathInfo(path) {\n    const gindices = [];\n    let type = this;\n    for (const prop of path) {\n      if (type.isBasic) {\n        throw new Error(\"Invalid path: cannot navigate beyond a basic type\");\n      }\n      const gindex = type.getPropertyGindex(prop);\n      // else stop navigating\n      if (gindex !== null) {\n        gindices.push(gindex);\n        type = type.getPropertyType(prop);\n      }\n    }\n    return {\n      type,\n      gindex: persistent_merkle_tree_1.concatGindices(gindices)\n    };\n  }\n  /**\n   * INTERNAL METHOD: post process `Ç¸ode` instance created from a proof and return either the same node,\n   * and a new node representing the same data is a different `Node` instance. Currently used exclusively\n   * by ContainerNodeStruct to convert `BranchNode` into `BranchNodeStruct`.\n   */\n  tree_fromProofNode(node) {\n    return {\n      node,\n      done: false\n    };\n  }\n}\nexports.CompositeType = CompositeType;\nfunction isCompositeType(type) {\n  return !type.isBasic;\n}\nexports.isCompositeType = isCompositeType;","map":{"version":3,"names":["persistent_merkle_tree_1","require","byteArray_1","merkleize_1","treePostProcessFromProofNode_1","abstract_1","exports","LENGTH_GINDEX","BigInt","symbolCachedPermanentRoot","Symbol","CompositeType","Type","constructor","cachePermanentRootStruct","isBasic","defaultView","toView","defaultValue","defaultViewDU","toViewDU","deserializeToView","data","dataView","DataView","buffer","byteOffset","byteLength","node","tree_deserializeFromBytes","uint8Array","length","getView","Tree","deserializeToViewDU","getViewDU","value","value_toTree","toValueFromView","view","commitView","tree_toValue","toValueFromViewDU","commitViewDU","toViewFromViewDU","toViewDUFromView","hashTreeRoot","cachedRoot","root","merkleize","getRoots","maxChunkCount","getCachedPermanentRoot","createFromProof","proof","rootNodeFromProof","rootNode","treePostProcessFromProofNode","undefined","byteArrayEquals","Error","tree_createProof","jsonPaths","gindexes","tree_createProofGindexes","createProof","type","ProofType","treeOffset","gindices","jsonPath","gindex","getPathInfo","isCompositeType","push","leafGindexes","tree_getLeafGindices","fixedSize","getNode","path","prop","getPropertyGindex","getPropertyType","concatGindices","tree_fromProofNode","done"],"sources":["../../src/type/composite.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}