{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SolanaWalletAdapterWalletAccount_adapter, _SolanaWalletAdapterWallet_instances, _SolanaWalletAdapterWallet_listeners, _SolanaWalletAdapterWallet_adapter, _SolanaWalletAdapterWallet_supportedTransactionVersions, _SolanaWalletAdapterWallet_chain, _SolanaWalletAdapterWallet_endpoint, _SolanaWalletAdapterWallet_account, _SolanaWalletAdapterWallet_connected, _SolanaWalletAdapterWallet_disconnected, _SolanaWalletAdapterWallet_connect, _SolanaWalletAdapterWallet_disconnect, _SolanaWalletAdapterWallet_on, _SolanaWalletAdapterWallet_emit, _SolanaWalletAdapterWallet_off, _SolanaWalletAdapterWallet_deserializeTransaction, _SolanaWalletAdapterWallet_signAndSendTransaction, _SolanaWalletAdapterWallet_signTransaction, _SolanaWalletAdapterWallet_signMessage;\nimport { isVersionedTransaction, WalletReadyState } from '@solana/wallet-adapter-base';\nimport { isSolanaChain } from '@solana/wallet-standard-chains';\nimport { SolanaSignAndSendTransaction, SolanaSignMessage, SolanaSignTransaction } from '@solana/wallet-standard-features';\nimport { getEndpointForChain } from '@solana/wallet-standard-util';\nimport { Connection, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { getWallets } from '@wallet-standard/app';\nimport { StandardConnect, StandardDisconnect, StandardEvents } from '@wallet-standard/features';\nimport { arraysEqual, bytesEqual, ReadonlyWalletAccount } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\n/** TODO: docs */\nexport class SolanaWalletAdapterWalletAccount extends ReadonlyWalletAccount {\n  constructor(_ref) {\n    let {\n      adapter,\n      address,\n      publicKey,\n      chains\n    } = _ref;\n    const features = [SolanaSignAndSendTransaction];\n    if ('signTransaction' in adapter) {\n      features.push(SolanaSignTransaction);\n    }\n    if ('signMessage' in adapter) {\n      features.push(SolanaSignMessage);\n    }\n    super({\n      address,\n      publicKey,\n      chains,\n      features\n    });\n    _SolanaWalletAdapterWalletAccount_adapter.set(this, void 0);\n    if (new.target === SolanaWalletAdapterWalletAccount) {\n      Object.freeze(this);\n    }\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWalletAccount_adapter, adapter, \"f\");\n  }\n}\n_SolanaWalletAdapterWalletAccount_adapter = new WeakMap();\n/** TODO: docs */\nexport class SolanaWalletAdapterWallet {\n  constructor(adapter, chain, endpoint) {\n    var _this = this;\n    _SolanaWalletAdapterWallet_instances.add(this);\n    _SolanaWalletAdapterWallet_listeners.set(this, {});\n    _SolanaWalletAdapterWallet_adapter.set(this, void 0);\n    _SolanaWalletAdapterWallet_supportedTransactionVersions.set(this, void 0);\n    _SolanaWalletAdapterWallet_chain.set(this, void 0);\n    _SolanaWalletAdapterWallet_endpoint.set(this, void 0);\n    _SolanaWalletAdapterWallet_account.set(this, void 0);\n    _SolanaWalletAdapterWallet_connect.set(this, async function () {\n      let {\n        silent\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (!silent && !__classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").connected) {\n        await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").connect();\n      }\n      __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected).call(_this);\n      return {\n        accounts: _this.accounts\n      };\n    });\n    _SolanaWalletAdapterWallet_disconnect.set(this, async () => {\n      await __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").disconnect();\n    });\n    _SolanaWalletAdapterWallet_on.set(this, (event, listener) => {\n      __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event]?.push(listener) || (__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event] = [listener]);\n      return () => __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_off).call(this, event, listener);\n    });\n    _SolanaWalletAdapterWallet_signAndSendTransaction.set(this, async function () {\n      const outputs = [];\n      for (var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++) {\n        inputs[_key] = arguments[_key];\n      }\n      if (inputs.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const input = inputs[0];\n        if (input.account !== __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_account, \"f\")) throw new Error('invalid account');\n        if (!isSolanaChain(input.chain)) throw new Error('invalid chain');\n        const transaction = __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(_this, input.transaction);\n        const {\n          commitment,\n          preflightCommitment,\n          skipPreflight,\n          maxRetries,\n          minContextSlot\n        } = input.options || {};\n        const endpoint = getEndpointForChain(input.chain, __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_endpoint, \"f\"));\n        const connection = new Connection(endpoint, commitment || 'confirmed');\n        const latestBlockhash = commitment ? await connection.getLatestBlockhash({\n          commitment: preflightCommitment || commitment,\n          minContextSlot\n        }) : undefined;\n        const signature = await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").sendTransaction(transaction, connection, {\n          preflightCommitment,\n          skipPreflight,\n          maxRetries,\n          minContextSlot\n        });\n        if (latestBlockhash) {\n          await connection.confirmTransaction({\n            ...latestBlockhash,\n            signature\n          }, commitment || 'confirmed');\n        }\n        outputs.push({\n          signature: bs58.decode(signature)\n        });\n      } else if (inputs.length > 1) {\n        // Adapters have no `sendAllTransactions` method, so just sign and send each transaction in serial.\n        for (const input of inputs) {\n          outputs.push(...(await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_signAndSendTransaction, \"f\").call(_this, input)));\n        }\n      }\n      return outputs;\n    });\n    _SolanaWalletAdapterWallet_signTransaction.set(this, async function () {\n      if (!('signTransaction' in __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\"))) throw new Error('signTransaction not implemented by adapter');\n      const outputs = [];\n      for (var _len2 = arguments.length, inputs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        inputs[_key2] = arguments[_key2];\n      }\n      if (inputs.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const input = inputs[0];\n        if (input.account !== __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_account, \"f\")) throw new Error('invalid account');\n        if (input.chain && !isSolanaChain(input.chain)) throw new Error('invalid chain');\n        const transaction = __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(_this, input.transaction);\n        const signedTransaction = await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").signTransaction(transaction);\n        const serializedTransaction = isVersionedTransaction(signedTransaction) ? signedTransaction.serialize() : new Uint8Array(signedTransaction.serialize({\n          requireAllSignatures: false,\n          verifySignatures: false\n        }));\n        outputs.push({\n          signedTransaction: serializedTransaction\n        });\n      } else if (inputs.length > 1) {\n        for (const input of inputs) {\n          if (input.account !== __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_account, \"f\")) throw new Error('invalid account');\n          if (input.chain && !isSolanaChain(input.chain)) throw new Error('invalid chain');\n        }\n        const transactions = inputs.map(_ref2 => {\n          let {\n            transaction\n          } = _ref2;\n          return __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_deserializeTransaction).call(_this, transaction);\n        });\n        const signedTransactions = await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").signAllTransactions(transactions);\n        outputs.push(...signedTransactions.map(signedTransaction => {\n          const serializedTransaction = isVersionedTransaction(signedTransaction) ? signedTransaction.serialize() : new Uint8Array(signedTransaction.serialize({\n            requireAllSignatures: false,\n            verifySignatures: false\n          }));\n          return {\n            signedTransaction: serializedTransaction\n          };\n        }));\n      }\n      return outputs;\n    });\n    _SolanaWalletAdapterWallet_signMessage.set(this, async function () {\n      if (!('signMessage' in __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\"))) throw new Error('signMessage not implemented by adapter');\n      const outputs = [];\n      for (var _len3 = arguments.length, inputs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        inputs[_key3] = arguments[_key3];\n      }\n      if (inputs.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const input = inputs[0];\n        if (input.account !== __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_account, \"f\")) throw new Error('invalid account');\n        const signature = await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_adapter, \"f\").signMessage(input.message);\n        outputs.push({\n          signedMessage: input.message,\n          signature\n        });\n      } else if (inputs.length > 1) {\n        // Adapters have no `signAllMessages` method, so just sign each message in serial.\n        for (const input of inputs) {\n          outputs.push(...(await __classPrivateFieldGet(_this, _SolanaWalletAdapterWallet_signMessage, \"f\").call(_this, input)));\n        }\n      }\n      return outputs;\n    });\n    if (new.target === SolanaWalletAdapterWallet) {\n      Object.freeze(this);\n    }\n    const supportedTransactionVersions = [...(adapter.supportedTransactionVersions || ['legacy'])];\n    if (!supportedTransactionVersions.length) {\n      supportedTransactionVersions.push('legacy');\n    }\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_adapter, adapter, \"f\");\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, supportedTransactionVersions, \"f\");\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_chain, chain, \"f\");\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_endpoint, endpoint, \"f\");\n    adapter.on('connect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected), this);\n    adapter.on('disconnect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_disconnected), this);\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected).call(this);\n  }\n  get version() {\n    return '1.0.0';\n  }\n  get name() {\n    return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").name;\n  }\n  get icon() {\n    return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").icon;\n  }\n  get chains() {\n    return [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")];\n  }\n  get features() {\n    const features = {\n      [StandardConnect]: {\n        version: '1.0.0',\n        connect: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_connect, \"f\")\n      },\n      [StandardDisconnect]: {\n        version: '1.0.0',\n        disconnect: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_disconnect, \"f\")\n      },\n      [StandardEvents]: {\n        version: '1.0.0',\n        on: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_on, \"f\")\n      },\n      [SolanaSignAndSendTransaction]: {\n        version: '1.0.0',\n        supportedTransactionVersions: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"),\n        signAndSendTransaction: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signAndSendTransaction, \"f\")\n      }\n    };\n    let signTransactionFeature;\n    if ('signTransaction' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\")) {\n      signTransactionFeature = {\n        [SolanaSignTransaction]: {\n          version: '1.0.0',\n          supportedTransactionVersions: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"),\n          signTransaction: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signTransaction, \"f\")\n        }\n      };\n    }\n    let signMessageFeature;\n    if ('signMessage' in __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\")) {\n      signMessageFeature = {\n        [SolanaSignMessage]: {\n          version: '1.0.0',\n          signMessage: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_signMessage, \"f\")\n        }\n      };\n    }\n    return {\n      ...features,\n      ...signTransactionFeature,\n      ...signMessageFeature\n    };\n  }\n  get accounts() {\n    return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\") ? [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\")] : [];\n  }\n  get endpoint() {\n    return __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_endpoint, \"f\");\n  }\n  destroy() {\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").off('connect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_connected), this);\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").off('disconnect', __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_disconnected), this);\n  }\n}\n_SolanaWalletAdapterWallet_listeners = new WeakMap(), _SolanaWalletAdapterWallet_adapter = new WeakMap(), _SolanaWalletAdapterWallet_supportedTransactionVersions = new WeakMap(), _SolanaWalletAdapterWallet_chain = new WeakMap(), _SolanaWalletAdapterWallet_endpoint = new WeakMap(), _SolanaWalletAdapterWallet_account = new WeakMap(), _SolanaWalletAdapterWallet_connect = new WeakMap(), _SolanaWalletAdapterWallet_disconnect = new WeakMap(), _SolanaWalletAdapterWallet_on = new WeakMap(), _SolanaWalletAdapterWallet_signAndSendTransaction = new WeakMap(), _SolanaWalletAdapterWallet_signTransaction = new WeakMap(), _SolanaWalletAdapterWallet_signMessage = new WeakMap(), _SolanaWalletAdapterWallet_instances = new WeakSet(), _SolanaWalletAdapterWallet_connected = function _SolanaWalletAdapterWallet_connected() {\n  const publicKey = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").publicKey?.toBytes();\n  if (publicKey) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const address = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\").publicKey.toBase58();\n    const account = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\");\n    if (!account || account.address !== address || account.chains.includes(__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")) || !bytesEqual(account.publicKey, publicKey)) {\n      __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_account, new SolanaWalletAdapterWalletAccount({\n        adapter: __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_adapter, \"f\"),\n        address,\n        publicKey,\n        chains: [__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_chain, \"f\")]\n      }), \"f\");\n      __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_emit).call(this, 'change', {\n        accounts: this.accounts\n      });\n    }\n  }\n}, _SolanaWalletAdapterWallet_disconnected = function _SolanaWalletAdapterWallet_disconnected() {\n  if (__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_account, \"f\")) {\n    __classPrivateFieldSet(this, _SolanaWalletAdapterWallet_account, undefined, \"f\");\n    __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_instances, \"m\", _SolanaWalletAdapterWallet_emit).call(this, 'change', {\n      accounts: this.accounts\n    });\n  }\n}, _SolanaWalletAdapterWallet_emit = function _SolanaWalletAdapterWallet_emit(event) {\n  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    args[_key4 - 1] = arguments[_key4];\n  }\n  // eslint-disable-next-line prefer-spread\n  __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event]?.forEach(listener => listener.apply(null, args));\n}, _SolanaWalletAdapterWallet_off = function _SolanaWalletAdapterWallet_off(event, listener) {\n  __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event] = __classPrivateFieldGet(this, _SolanaWalletAdapterWallet_listeners, \"f\")[event]?.filter(existingListener => listener !== existingListener);\n}, _SolanaWalletAdapterWallet_deserializeTransaction = function _SolanaWalletAdapterWallet_deserializeTransaction(serializedTransaction) {\n  const transaction = VersionedTransaction.deserialize(serializedTransaction);\n  if (!__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\").includes(transaction.version)) throw new Error('unsupported transaction version');\n  if (transaction.version === 'legacy' && arraysEqual(__classPrivateFieldGet(this, _SolanaWalletAdapterWallet_supportedTransactionVersions, \"f\"), ['legacy'])) return Transaction.from(serializedTransaction);\n  return transaction;\n};\n/** TODO: docs */\nexport function registerWalletAdapter(adapter, chain, endpoint) {\n  let match = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : wallet => wallet.name === adapter.name;\n  const {\n    register,\n    get,\n    on\n  } = getWallets();\n  const destructors = [];\n  function destroy() {\n    destructors.forEach(destroy => destroy());\n    destructors.length = 0;\n  }\n  function setup() {\n    // If the adapter is unsupported, or a standard wallet that matches it has already been registered, do nothing.\n    if (adapter.readyState === WalletReadyState.Unsupported || get().some(match)) return true;\n    // If the adapter isn't ready, try again later.\n    const ready = adapter.readyState === WalletReadyState.Installed || adapter.readyState === WalletReadyState.Loadable;\n    if (ready) {\n      const wallet = new SolanaWalletAdapterWallet(adapter, chain, endpoint);\n      destructors.push(() => wallet.destroy());\n      // Register the adapter wrapped as a standard wallet, and receive a function to unregister the adapter.\n      destructors.push(register(wallet));\n      // Whenever a standard wallet is registered ...\n      destructors.push(on('register', function () {\n        for (var _len5 = arguments.length, wallets = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          wallets[_key5] = arguments[_key5];\n        }\n        // ... check if it matches the adapter.\n        if (wallets.some(match)) {\n          // If it does, remove the event listener and unregister the adapter.\n          destroy();\n        }\n      }));\n    }\n    return ready;\n  }\n  if (!setup()) {\n    function listener() {\n      if (setup()) {\n        adapter.off('readyStateChange', listener);\n      }\n    }\n    adapter.on('readyStateChange', listener);\n    destructors.push(() => adapter.off('readyStateChange', listener));\n  }\n  return destroy;\n}","map":{"version":3,"names":["isVersionedTransaction","WalletReadyState","isSolanaChain","SolanaSignAndSendTransaction","SolanaSignMessage","SolanaSignTransaction","getEndpointForChain","Connection","Transaction","VersionedTransaction","getWallets","StandardConnect","StandardDisconnect","StandardEvents","arraysEqual","bytesEqual","ReadonlyWalletAccount","bs58","SolanaWalletAdapterWalletAccount","constructor","_ref","adapter","address","publicKey","chains","features","push","_SolanaWalletAdapterWalletAccount_adapter","set","new","target","Object","freeze","__classPrivateFieldSet","SolanaWalletAdapterWallet","chain","endpoint","_this","_SolanaWalletAdapterWallet_listeners","_SolanaWalletAdapterWallet_adapter","_SolanaWalletAdapterWallet_supportedTransactionVersions","_SolanaWalletAdapterWallet_chain","_SolanaWalletAdapterWallet_endpoint","_SolanaWalletAdapterWallet_account","_SolanaWalletAdapterWallet_connect","silent","arguments","length","undefined","__classPrivateFieldGet","connected","connect","_SolanaWalletAdapterWallet_instances","_SolanaWalletAdapterWallet_connected","call","accounts","_SolanaWalletAdapterWallet_disconnect","disconnect","_SolanaWalletAdapterWallet_on","event","listener","_SolanaWalletAdapterWallet_off","_SolanaWalletAdapterWallet_signAndSendTransaction","outputs","_len","inputs","Array","_key","input","account","Error","transaction","_SolanaWalletAdapterWallet_deserializeTransaction","commitment","preflightCommitment","skipPreflight","maxRetries","minContextSlot","options","connection","latestBlockhash","getLatestBlockhash","signature","sendTransaction","confirmTransaction","decode","_SolanaWalletAdapterWallet_signTransaction","_len2","_key2","signedTransaction","signTransaction","serializedTransaction","serialize","Uint8Array","requireAllSignatures","verifySignatures","transactions","map","_ref2","signedTransactions","signAllTransactions","_SolanaWalletAdapterWallet_signMessage","_len3","_key3","signMessage","message","signedMessage","supportedTransactionVersions","on","_SolanaWalletAdapterWallet_disconnected","version","name","icon","signAndSendTransaction","signTransactionFeature","signMessageFeature","destroy","off","toBytes","toBase58","includes","_SolanaWalletAdapterWallet_emit","_len4","args","_key4","forEach","apply","filter","existingListener","deserialize","from","registerWalletAdapter","match","wallet","register","get","destructors","setup","readyState","Unsupported","some","ready","Installed","Loadable","_len5","wallets","_key5"],"sources":["/hood3/node_modules/@solana/wallet-standard-wallet-adapter-react/node_modules/@solana/wallet-standard-wallet-adapter-base/src/wallet.ts"],"sourcesContent":["import { type Adapter, isVersionedTransaction, WalletReadyState } from '@solana/wallet-adapter-base';\nimport { isSolanaChain, type SolanaChain } from '@solana/wallet-standard-chains';\nimport {\n    SolanaSignAndSendTransaction,\n    type SolanaSignAndSendTransactionFeature,\n    type SolanaSignAndSendTransactionMethod,\n    type SolanaSignAndSendTransactionOutput,\n    SolanaSignMessage,\n    type SolanaSignMessageFeature,\n    type SolanaSignMessageMethod,\n    type SolanaSignMessageOutput,\n    SolanaSignTransaction,\n    type SolanaSignTransactionFeature,\n    type SolanaSignTransactionMethod,\n    type SolanaSignTransactionOutput,\n    type SolanaTransactionVersion,\n} from '@solana/wallet-standard-features';\nimport { getEndpointForChain } from '@solana/wallet-standard-util';\nimport { Connection, Transaction, VersionedTransaction } from '@solana/web3.js';\nimport { getWallets } from '@wallet-standard/app';\nimport type { Wallet, WalletIcon } from '@wallet-standard/base';\nimport {\n    StandardConnect,\n    type StandardConnectFeature,\n    type StandardConnectMethod,\n    StandardDisconnect,\n    type StandardDisconnectFeature,\n    type StandardDisconnectMethod,\n    StandardEvents,\n    type StandardEventsFeature,\n    type StandardEventsListeners,\n    type StandardEventsNames,\n    type StandardEventsOnMethod,\n} from '@wallet-standard/features';\nimport { arraysEqual, bytesEqual, ReadonlyWalletAccount } from '@wallet-standard/wallet';\nimport bs58 from 'bs58';\n\n/** TODO: docs */\nexport class SolanaWalletAdapterWalletAccount extends ReadonlyWalletAccount {\n    readonly #adapter: Adapter;\n\n    constructor({\n        adapter,\n        address,\n        publicKey,\n        chains,\n    }: {\n        adapter: Adapter;\n        address: string;\n        publicKey: Uint8Array;\n        chains: readonly SolanaChain[];\n    }) {\n        const features: (keyof (SolanaSignAndSendTransactionFeature &\n            SolanaSignTransactionFeature &\n            SolanaSignMessageFeature))[] = [SolanaSignAndSendTransaction];\n        if ('signTransaction' in adapter) {\n            features.push(SolanaSignTransaction);\n        }\n        if ('signMessage' in adapter) {\n            features.push(SolanaSignMessage);\n        }\n\n        super({ address, publicKey, chains, features });\n        if (new.target === SolanaWalletAdapterWalletAccount) {\n            Object.freeze(this);\n        }\n\n        this.#adapter = adapter;\n    }\n}\n\n/** TODO: docs */\nexport class SolanaWalletAdapterWallet implements Wallet {\n    readonly #listeners: {\n        [E in StandardEventsNames]?: StandardEventsListeners[E][];\n    } = {};\n    readonly #adapter: Adapter;\n    readonly #supportedTransactionVersions: readonly SolanaTransactionVersion[];\n    readonly #chain: SolanaChain;\n    readonly #endpoint: string | undefined;\n    #account: SolanaWalletAdapterWalletAccount | undefined;\n\n    get version() {\n        return '1.0.0' as const;\n    }\n\n    get name() {\n        return this.#adapter.name;\n    }\n\n    get icon() {\n        return this.#adapter.icon as WalletIcon;\n    }\n\n    get chains() {\n        return [this.#chain];\n    }\n\n    get features(): StandardConnectFeature &\n        StandardDisconnectFeature &\n        SolanaSignAndSendTransactionFeature &\n        Partial<SolanaSignTransactionFeature & SolanaSignMessageFeature> {\n        const features: StandardConnectFeature &\n            StandardDisconnectFeature &\n            StandardEventsFeature &\n            SolanaSignAndSendTransactionFeature = {\n            [StandardConnect]: {\n                version: '1.0.0',\n                connect: this.#connect,\n            },\n            [StandardDisconnect]: {\n                version: '1.0.0',\n                disconnect: this.#disconnect,\n            },\n            [StandardEvents]: {\n                version: '1.0.0',\n                on: this.#on,\n            },\n            [SolanaSignAndSendTransaction]: {\n                version: '1.0.0',\n                supportedTransactionVersions: this.#supportedTransactionVersions,\n                signAndSendTransaction: this.#signAndSendTransaction,\n            },\n        };\n\n        let signTransactionFeature: SolanaSignTransactionFeature | undefined;\n        if ('signTransaction' in this.#adapter) {\n            signTransactionFeature = {\n                [SolanaSignTransaction]: {\n                    version: '1.0.0',\n                    supportedTransactionVersions: this.#supportedTransactionVersions,\n                    signTransaction: this.#signTransaction,\n                },\n            };\n        }\n\n        let signMessageFeature: SolanaSignMessageFeature | undefined;\n        if ('signMessage' in this.#adapter) {\n            signMessageFeature = {\n                [SolanaSignMessage]: {\n                    version: '1.0.0',\n                    signMessage: this.#signMessage,\n                },\n            };\n        }\n\n        return { ...features, ...signTransactionFeature, ...signMessageFeature };\n    }\n\n    get accounts() {\n        return this.#account ? [this.#account] : [];\n    }\n\n    get endpoint() {\n        return this.#endpoint;\n    }\n\n    constructor(adapter: Adapter, chain: SolanaChain, endpoint?: string) {\n        if (new.target === SolanaWalletAdapterWallet) {\n            Object.freeze(this);\n        }\n\n        const supportedTransactionVersions = [...(adapter.supportedTransactionVersions || ['legacy'])];\n        if (!supportedTransactionVersions.length) {\n            supportedTransactionVersions.push('legacy');\n        }\n\n        this.#adapter = adapter;\n        this.#supportedTransactionVersions = supportedTransactionVersions;\n        this.#chain = chain;\n        this.#endpoint = endpoint;\n\n        adapter.on('connect', this.#connected, this);\n        adapter.on('disconnect', this.#disconnected, this);\n\n        this.#connected();\n    }\n\n    destroy(): void {\n        this.#adapter.off('connect', this.#connected, this);\n        this.#adapter.off('disconnect', this.#disconnected, this);\n    }\n\n    #connected(): void {\n        const publicKey = this.#adapter.publicKey?.toBytes();\n        if (publicKey) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const address = this.#adapter.publicKey!.toBase58();\n            const account = this.#account;\n            if (\n                !account ||\n                account.address !== address ||\n                account.chains.includes(this.#chain) ||\n                !bytesEqual(account.publicKey, publicKey)\n            ) {\n                this.#account = new SolanaWalletAdapterWalletAccount({\n                    adapter: this.#adapter,\n                    address,\n                    publicKey,\n                    chains: [this.#chain],\n                });\n                this.#emit('change', { accounts: this.accounts });\n            }\n        }\n    }\n\n    #disconnected(): void {\n        if (this.#account) {\n            this.#account = undefined;\n            this.#emit('change', { accounts: this.accounts });\n        }\n    }\n\n    #connect: StandardConnectMethod = async ({ silent } = {}) => {\n        if (!silent && !this.#adapter.connected) {\n            await this.#adapter.connect();\n        }\n\n        this.#connected();\n\n        return { accounts: this.accounts };\n    };\n\n    #disconnect: StandardDisconnectMethod = async () => {\n        await this.#adapter.disconnect();\n    };\n\n    #on: StandardEventsOnMethod = (event, listener) => {\n        this.#listeners[event]?.push(listener) || (this.#listeners[event] = [listener]);\n        return (): void => this.#off(event, listener);\n    };\n\n    #emit<E extends StandardEventsNames>(event: E, ...args: Parameters<StandardEventsListeners[E]>): void {\n        // eslint-disable-next-line prefer-spread\n        this.#listeners[event]?.forEach((listener) => listener.apply(null, args));\n    }\n\n    #off<E extends StandardEventsNames>(event: E, listener: StandardEventsListeners[E]): void {\n        this.#listeners[event] = this.#listeners[event]?.filter((existingListener) => listener !== existingListener);\n    }\n\n    #deserializeTransaction(serializedTransaction: Uint8Array): Transaction | VersionedTransaction {\n        const transaction = VersionedTransaction.deserialize(serializedTransaction);\n        if (!this.#supportedTransactionVersions.includes(transaction.version))\n            throw new Error('unsupported transaction version');\n        if (transaction.version === 'legacy' && arraysEqual(this.#supportedTransactionVersions, ['legacy']))\n            return Transaction.from(serializedTransaction);\n        return transaction;\n    }\n\n    #signAndSendTransaction: SolanaSignAndSendTransactionMethod = async (...inputs) => {\n        const outputs: SolanaSignAndSendTransactionOutput[] = [];\n\n        if (inputs.length === 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const input = inputs[0]!;\n            if (input.account !== this.#account) throw new Error('invalid account');\n            if (!isSolanaChain(input.chain)) throw new Error('invalid chain');\n            const transaction = this.#deserializeTransaction(input.transaction);\n            const { commitment, preflightCommitment, skipPreflight, maxRetries, minContextSlot } = input.options || {};\n            const endpoint = getEndpointForChain(input.chain, this.#endpoint);\n            const connection = new Connection(endpoint, commitment || 'confirmed');\n\n            const latestBlockhash = commitment\n                ? await connection.getLatestBlockhash({\n                      commitment: preflightCommitment || commitment,\n                      minContextSlot,\n                  })\n                : undefined;\n\n            const signature = await this.#adapter.sendTransaction(transaction, connection, {\n                preflightCommitment,\n                skipPreflight,\n                maxRetries,\n                minContextSlot,\n            });\n\n            if (latestBlockhash) {\n                await connection.confirmTransaction(\n                    {\n                        ...latestBlockhash,\n                        signature,\n                    },\n                    commitment || 'confirmed'\n                );\n            }\n\n            outputs.push({ signature: bs58.decode(signature) });\n        } else if (inputs.length > 1) {\n            // Adapters have no `sendAllTransactions` method, so just sign and send each transaction in serial.\n            for (const input of inputs) {\n                outputs.push(...(await this.#signAndSendTransaction(input)));\n            }\n        }\n\n        return outputs;\n    };\n\n    #signTransaction: SolanaSignTransactionMethod = async (...inputs) => {\n        if (!('signTransaction' in this.#adapter)) throw new Error('signTransaction not implemented by adapter');\n        const outputs: SolanaSignTransactionOutput[] = [];\n\n        if (inputs.length === 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const input = inputs[0]!;\n            if (input.account !== this.#account) throw new Error('invalid account');\n            if (input.chain && !isSolanaChain(input.chain)) throw new Error('invalid chain');\n            const transaction = this.#deserializeTransaction(input.transaction);\n\n            const signedTransaction = await this.#adapter.signTransaction(transaction);\n\n            const serializedTransaction = isVersionedTransaction(signedTransaction)\n                ? signedTransaction.serialize()\n                : new Uint8Array(\n                      signedTransaction.serialize({\n                          requireAllSignatures: false,\n                          verifySignatures: false,\n                      })\n                  );\n\n            outputs.push({ signedTransaction: serializedTransaction });\n        } else if (inputs.length > 1) {\n            for (const input of inputs) {\n                if (input.account !== this.#account) throw new Error('invalid account');\n                if (input.chain && !isSolanaChain(input.chain)) throw new Error('invalid chain');\n            }\n            const transactions = inputs.map(({ transaction }) => this.#deserializeTransaction(transaction));\n\n            const signedTransactions = await this.#adapter.signAllTransactions(transactions);\n\n            outputs.push(\n                ...signedTransactions.map((signedTransaction) => {\n                    const serializedTransaction = isVersionedTransaction(signedTransaction)\n                        ? signedTransaction.serialize()\n                        : new Uint8Array(\n                              signedTransaction.serialize({\n                                  requireAllSignatures: false,\n                                  verifySignatures: false,\n                              })\n                          );\n\n                    return { signedTransaction: serializedTransaction };\n                })\n            );\n        }\n\n        return outputs;\n    };\n\n    #signMessage: SolanaSignMessageMethod = async (...inputs) => {\n        if (!('signMessage' in this.#adapter)) throw new Error('signMessage not implemented by adapter');\n        const outputs: SolanaSignMessageOutput[] = [];\n\n        if (inputs.length === 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const input = inputs[0]!;\n            if (input.account !== this.#account) throw new Error('invalid account');\n\n            const signature = await this.#adapter.signMessage(input.message);\n\n            outputs.push({ signedMessage: input.message, signature });\n        } else if (inputs.length > 1) {\n            // Adapters have no `signAllMessages` method, so just sign each message in serial.\n            for (const input of inputs) {\n                outputs.push(...(await this.#signMessage(input)));\n            }\n        }\n\n        return outputs;\n    };\n}\n\n/** TODO: docs */\nexport function registerWalletAdapter(\n    adapter: Adapter,\n    chain: SolanaChain,\n    endpoint?: string,\n    match: (wallet: Wallet) => boolean = (wallet) => wallet.name === adapter.name\n): () => void {\n    const { register, get, on } = getWallets();\n    const destructors: (() => void)[] = [];\n\n    function destroy(): void {\n        destructors.forEach((destroy) => destroy());\n        destructors.length = 0;\n    }\n\n    function setup(): boolean {\n        // If the adapter is unsupported, or a standard wallet that matches it has already been registered, do nothing.\n        if (adapter.readyState === WalletReadyState.Unsupported || get().some(match)) return true;\n\n        // If the adapter isn't ready, try again later.\n        const ready =\n            adapter.readyState === WalletReadyState.Installed || adapter.readyState === WalletReadyState.Loadable;\n        if (ready) {\n            const wallet = new SolanaWalletAdapterWallet(adapter, chain, endpoint);\n            destructors.push(() => wallet.destroy());\n            // Register the adapter wrapped as a standard wallet, and receive a function to unregister the adapter.\n            destructors.push(register(wallet));\n            // Whenever a standard wallet is registered ...\n            destructors.push(\n                on('register', (...wallets) => {\n                    // ... check if it matches the adapter.\n                    if (wallets.some(match)) {\n                        // If it does, remove the event listener and unregister the adapter.\n                        destroy();\n                    }\n                })\n            );\n        }\n        return ready;\n    }\n\n    if (!setup()) {\n        function listener(): void {\n            if (setup()) {\n                adapter.off('readyStateChange', listener);\n            }\n        }\n\n        adapter.on('readyStateChange', listener);\n        destructors.push(() => adapter.off('readyStateChange', listener));\n    }\n\n    return destroy;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}