{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.byteArrayEquals = exports.fromHexString = exports.toHexString = void 0;\n// Caching this info costs about ~1000 bytes and speeds up toHexString() by x6\nconst hexByByte = new Array(256);\nfunction toHexString(bytes) {\n  let hex = \"0x\";\n  for (const byte of bytes) {\n    if (!hexByByte[byte]) {\n      hexByByte[byte] = byte < 16 ? \"0\" + byte.toString(16) : byte.toString(16);\n    }\n    hex += hexByByte[byte];\n  }\n  return hex;\n}\nexports.toHexString = toHexString;\nfunction fromHexString(hex) {\n  if (typeof hex !== \"string\") {\n    throw new Error(`hex argument type ${typeof hex} must be of type string`);\n  }\n  if (hex.startsWith(\"0x\")) {\n    hex = hex.slice(2);\n  }\n  if (hex.length % 2 !== 0) {\n    throw new Error(`hex string length ${hex.length} must be multiple of 2`);\n  }\n  const byteLen = hex.length / 2;\n  const bytes = new Uint8Array(byteLen);\n  for (let i = 0; i < byteLen; i++) {\n    const byte = parseInt(hex.slice(i * 2, (i + 1) * 2), 16);\n    bytes[i] = byte;\n  }\n  return bytes;\n}\nexports.fromHexString = fromHexString;\nfunction byteArrayEquals(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\nexports.byteArrayEquals = byteArrayEquals;","map":{"version":3,"names":["hexByByte","Array","toHexString","bytes","hex","byte","toString","exports","fromHexString","Error","startsWith","slice","length","byteLen","Uint8Array","i","parseInt","byteArrayEquals","a","b"],"sources":["../../src/util/byteArray.ts"],"sourcesContent":[null],"mappings":";;;;;;AAEA;AACA,MAAMA,SAAS,GAAG,IAAIC,KAAK,CAAS,GAAG,CAAC;AAExC,SAAgBC,WAAWA,CAACC,KAA8B;EACxD,IAAIC,GAAG,GAAG,IAAI;EACd,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;IACxB,IAAI,CAACH,SAAS,CAACK,IAAI,CAAC,EAAE;MACpBL,SAAS,CAACK,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE,GAAG,GAAG,GAAGA,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC;;IAE3EF,GAAG,IAAIJ,SAAS,CAACK,IAAI,CAAC;;EAExB,OAAOD,GAAG;AACZ;AATAG,OAAA,CAAAL,WAAA,GAAAA,WAAA;AAWA,SAAgBM,aAAaA,CAACJ,GAAW;EACvC,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC3B,MAAM,IAAIK,KAAK,CAAC,qBAAqB,OAAOL,GAAG,yBAAyB,CAAC;;EAG3E,IAAIA,GAAG,CAACM,UAAU,CAAC,IAAI,CAAC,EAAE;IACxBN,GAAG,GAAGA,GAAG,CAACO,KAAK,CAAC,CAAC,CAAC;;EAGpB,IAAIP,GAAG,CAACQ,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IACxB,MAAM,IAAIH,KAAK,CAAC,qBAAqBL,GAAG,CAACQ,MAAM,wBAAwB,CAAC;;EAG1E,MAAMC,OAAO,GAAGT,GAAG,CAACQ,MAAM,GAAG,CAAC;EAC9B,MAAMT,KAAK,GAAG,IAAIW,UAAU,CAACD,OAAO,CAAC;EACrC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,EAAEE,CAAC,EAAE,EAAE;IAChC,MAAMV,IAAI,GAAGW,QAAQ,CAACZ,GAAG,CAACO,KAAK,CAACI,CAAC,GAAG,CAAC,EAAE,CAACA,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;IACxDZ,KAAK,CAACY,CAAC,CAAC,GAAGV,IAAI;;EAEjB,OAAOF,KAAK;AACd;AApBAI,OAAA,CAAAC,aAAA,GAAAA,aAAA;AAsBA,SAAgBS,eAAeA,CAACC,CAAa,EAAEC,CAAa;EAC1D,IAAID,CAAC,CAACN,MAAM,KAAKO,CAAC,CAACP,MAAM,EAAE;IACzB,OAAO,KAAK;;EAEd,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,CAAC,CAACN,MAAM,EAAEG,CAAC,EAAE,EAAE;IACjC,IAAIG,CAAC,CAACH,CAAC,CAAC,KAAKI,CAAC,CAACJ,CAAC,CAAC,EAAE,OAAO,KAAK;;EAEjC,OAAO,IAAI;AACb;AARAR,OAAA,CAAAU,eAAA,GAAAA,eAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}