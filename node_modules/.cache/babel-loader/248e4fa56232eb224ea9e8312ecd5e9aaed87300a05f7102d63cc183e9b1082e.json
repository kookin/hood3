{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContainerTreeViewClass = void 0;\nconst composite_1 = require(\"../type/composite\");\nconst branchNodeStruct_1 = require(\"../branchNodeStruct\");\nconst abstract_1 = require(\"./abstract\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * Intented usage:\n *\n * - Get initial BeaconState from disk.\n * - Before applying next block, switch to mutable\n * - Get some field, create a view in mutable mode\n * - Do modifications of the state in the state transition function\n * - When done, commit and apply new root node once to og BeaconState\n * - However, keep all the caches and transfer them to the new BeaconState\n *\n * Questions:\n * - Can the child views created in mutable mode switch to not mutable? If so, it seems that it needs to recursively\n *   iterate the entire data structure and views\n *\n */\nclass ContainerTreeView extends abstract_1.TreeView {\n  constructor(type, tree) {\n    super();\n    this.type = type;\n    this.tree = tree;\n  }\n  get node() {\n    return this.tree.rootNode;\n  }\n}\nfunction getContainerTreeViewClass(type) {\n  class CustomContainerTreeView extends ContainerTreeView {}\n  // Dynamically define prototype methods\n  for (let index = 0; index < type.fieldsEntries.length; index++) {\n    const {\n      fieldName,\n      fieldType\n    } = type.fieldsEntries[index];\n    // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n    // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n    // and use the cached views array to store the new node.\n    if (fieldType.isBasic) {\n      Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // TODO: Review the memory cost of this closures\n        get: function () {\n          return this.tree.rootNode.value[fieldName];\n        },\n        set: function (value) {\n          const node = this.tree.rootNode;\n          const newNodeValue = this.type.clone(node.value);\n          // TODO: Should this check for valid field name? Benchmark the cost\n          newNodeValue[fieldName] = value;\n          this.tree.rootNode = new branchNodeStruct_1.BranchNodeStruct(node[\"valueToNode\"], newNodeValue);\n        }\n      });\n    }\n    // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n    // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n    // set it to the parent tree in the field gindex.\n    else if (composite_1.isCompositeType(fieldType)) {\n      Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // Returns TreeView of fieldName\n        get: function () {\n          const {\n            value\n          } = this.tree.rootNode;\n          return fieldType.toView(value[fieldName]);\n        },\n        // Expects TreeView of fieldName\n        set: function (view) {\n          const node = this.tree.rootNode;\n          const newNodeValue = this.type.clone(node.value);\n          // TODO: Should this check for valid field name? Benchmark the cost\n          newNodeValue[fieldName] = fieldType.toValueFromView(view);\n          this.tree.rootNode = new branchNodeStruct_1.BranchNodeStruct(node[\"valueToNode\"], newNodeValue);\n        }\n      });\n    }\n    // Should never happen\n    else {\n      /* istanbul ignore next - unreachable code */\n      throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);\n    }\n  }\n  // Change class name\n  Object.defineProperty(CustomContainerTreeView, \"name\", {\n    value: type.typeName,\n    writable: false\n  });\n  return CustomContainerTreeView;\n}\nexports.getContainerTreeViewClass = getContainerTreeViewClass;","map":{"version":3,"names":["composite_1","require","branchNodeStruct_1","abstract_1","ContainerTreeView","TreeView","constructor","type","tree","node","rootNode","getContainerTreeViewClass","CustomContainerTreeView","index","fieldsEntries","length","fieldName","fieldType","isBasic","Object","defineProperty","prototype","configurable","enumerable","get","value","set","newNodeValue","clone","BranchNodeStruct","isCompositeType","toView","view","toValueFromView","Error","typeName","writable","exports"],"sources":["../../src/view/containerNodeStruct.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}