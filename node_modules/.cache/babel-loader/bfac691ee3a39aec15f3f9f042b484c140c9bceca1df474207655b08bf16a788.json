{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertValidArrayLength = exports.value_defaultValueArray = exports.value_equals = exports.value_cloneArray = exports.value_toJsonArray = exports.value_fromJsonArray = exports.tree_deserializeFromBytesArrayBasic = exports.tree_serializeToBytesArrayBasic = exports.value_deserializeFromBytesArrayBasic = exports.value_serializeToBytesArrayBasic = exports.setChunksNode = exports.addLengthNode = exports.getChunksNodeFromRootNode = exports.getLengthFromRootNode = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\n// There's a matrix of Array-ish types that require a combination of this functions.\n// Regular class extends syntax doesn't work because it can only extend a single class.\n//\n// Type of array: List, Vector. Changes length property\n// Type of element: Basic, Composite. Changes merkelization if packing or not.\n// If Composite: Fixed len, Variable len. Changes the serialization requiring offsets.\n/**\n * SSZ Lists (variable-length arrays) include the length of the list in the tree\n * This length is always in the same index in the tree\n * ```\n *   1\n *  / \\\n * 2   3 // <-here\n * ```\n */\nfunction getLengthFromRootNode(node) {\n  // Length is represented as a Uint32 at the start of the chunk:\n  // 4 = 4 bytes in Uint32\n  // 0 = 0 offset bytes in Node's data\n  return node.right.getUint(4, 0);\n}\nexports.getLengthFromRootNode = getLengthFromRootNode;\nfunction getChunksNodeFromRootNode(node) {\n  return node.left;\n}\nexports.getChunksNodeFromRootNode = getChunksNodeFromRootNode;\nfunction addLengthNode(chunksNode, length) {\n  return new persistent_merkle_tree_1.BranchNode(chunksNode, persistent_merkle_tree_1.LeafNode.fromUint32(length));\n}\nexports.addLengthNode = addLengthNode;\nfunction setChunksNode(rootNode, chunksNode, newLength) {\n  const lengthNode = newLength !== undefined ?\n  // If newLength is set, create a new node for length\n  persistent_merkle_tree_1.LeafNode.fromUint32(newLength) :\n  // else re-use existing node\n  rootNode.right;\n  return new persistent_merkle_tree_1.BranchNode(chunksNode, lengthNode);\n}\nexports.setChunksNode = setChunksNode;\n/**\n * @param length In List length = value.length, Vector length = fixed value\n */\nfunction value_serializeToBytesArrayBasic(elementType, length, output, offset, value) {\n  const elSize = elementType.byteLength;\n  for (let i = 0; i < length; i++) {\n    elementType.value_serializeToBytes(output, offset + i * elSize, value[i]);\n  }\n  return offset + length * elSize;\n}\nexports.value_serializeToBytesArrayBasic = value_serializeToBytesArrayBasic;\nfunction value_deserializeFromBytesArrayBasic(elementType, data, start, end, arrayProps) {\n  const elSize = elementType.byteLength;\n  // Vector + List length validation\n  const length = (end - start) / elSize;\n  assertValidArrayLength(length, arrayProps, true);\n  const values = new Array(length);\n  for (let i = 0; i < length; i++) {\n    // TODO: If faster, consider skipping size check for uint types\n    values[i] = elementType.value_deserializeFromBytes(data, start + i * elSize, start + (i + 1) * elSize);\n  }\n  return values;\n}\nexports.value_deserializeFromBytesArrayBasic = value_deserializeFromBytesArrayBasic;\n/**\n * @param length In List length = value.length, Vector length = fixed value\n */\nfunction tree_serializeToBytesArrayBasic(elementType, length, depth, output, offset, node) {\n  const size = elementType.byteLength * length;\n  const chunkCount = Math.ceil(size / 32);\n  const nodes = persistent_merkle_tree_1.getNodesAtDepth(node, depth, 0, chunkCount);\n  persistent_merkle_tree_1.packedNodeRootsToBytes(output.dataView, offset, size, nodes);\n  return offset + size;\n}\nexports.tree_serializeToBytesArrayBasic = tree_serializeToBytesArrayBasic;\n// List of basic elements will pack them in merkelized form\nfunction tree_deserializeFromBytesArrayBasic(elementType, chunkDepth, data, start, end, arrayProps) {\n  // Vector + List length validation\n  const length = (end - start) / elementType.byteLength;\n  assertValidArrayLength(length, arrayProps, true);\n  // Abstract converting data to LeafNode to allow for custom data representation, such as the hashObject\n  const chunksNode = persistent_merkle_tree_1.packedRootsBytesToNode(chunkDepth, data.dataView, start, end);\n  if (arrayProps.isList) {\n    return addLengthNode(chunksNode, length);\n  } else {\n    return chunksNode;\n  }\n}\nexports.tree_deserializeFromBytesArrayBasic = tree_deserializeFromBytesArrayBasic;\n/**\n * @param length In List length = undefined, Vector length = fixed value\n */\nfunction value_fromJsonArray(elementType, json, arrayProps) {\n  if (!Array.isArray(json)) {\n    throw Error(\"JSON is not an array\");\n  }\n  assertValidArrayLength(json.length, arrayProps);\n  const value = new Array(json.length);\n  for (let i = 0; i < json.length; i++) {\n    value[i] = elementType.fromJson(json[i]);\n  }\n  return value;\n}\nexports.value_fromJsonArray = value_fromJsonArray;\n/**\n * @param length In List length = undefined, Vector length = fixed value\n */\nfunction value_toJsonArray(elementType, value, arrayProps) {\n  const length = arrayProps.isList ? value.length : arrayProps.length;\n  const json = new Array(length);\n  for (let i = 0; i < length; i++) {\n    json[i] = elementType.toJson(value[i]);\n  }\n  return json;\n}\nexports.value_toJsonArray = value_toJsonArray;\n/**\n * Clone recursively an array of basic or composite types\n */\nfunction value_cloneArray(elementType, value) {\n  const newValue = new Array(value.length);\n  for (let i = 0; i < value.length; i++) {\n    newValue[i] = elementType.clone(value[i]);\n  }\n  return newValue;\n}\nexports.value_cloneArray = value_cloneArray;\n/**\n * Check recursively if a type is structuraly equal. Returns early\n */\nfunction value_equals(elementType, a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (!elementType.equals(a[i], b[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nexports.value_equals = value_equals;\nfunction value_defaultValueArray(elementType, length) {\n  const values = new Array(length);\n  for (let i = 0; i < length; i++) {\n    values[i] = elementType.defaultValue();\n  }\n  return values;\n}\nexports.value_defaultValueArray = value_defaultValueArray;\n/**\n * @param checkNonDecimalLength Check that length is a multiple of element size.\n * Optional since it's not necessary in getOffsetsArrayComposite() fn.\n */\nfunction assertValidArrayLength(length, arrayProps, checkNonDecimalLength) {\n  if (checkNonDecimalLength && length % 1 !== 0) {\n    throw Error(\"size not multiple of element fixedSize\");\n  }\n  // Vector + List length validation\n  if (arrayProps.isList) {\n    if (length > arrayProps.limit) {\n      throw new Error(`Invalid list length ${length} over limit ${arrayProps.limit}`);\n    }\n  } else {\n    if (length !== arrayProps.length) {\n      throw new Error(`Incorrect vector length ${length} expected ${arrayProps.length}`);\n    }\n  }\n}\nexports.assertValidArrayLength = assertValidArrayLength;","map":{"version":3,"names":["persistent_merkle_tree_1","require","getLengthFromRootNode","node","right","getUint","exports","getChunksNodeFromRootNode","left","addLengthNode","chunksNode","length","BranchNode","LeafNode","fromUint32","setChunksNode","rootNode","newLength","lengthNode","undefined","value_serializeToBytesArrayBasic","elementType","output","offset","value","elSize","byteLength","i","value_serializeToBytes","value_deserializeFromBytesArrayBasic","data","start","end","arrayProps","assertValidArrayLength","values","Array","value_deserializeFromBytes","tree_serializeToBytesArrayBasic","depth","size","chunkCount","Math","ceil","nodes","getNodesAtDepth","packedNodeRootsToBytes","dataView","tree_deserializeFromBytesArrayBasic","chunkDepth","packedRootsBytesToNode","isList","value_fromJsonArray","json","isArray","Error","fromJson","value_toJsonArray","toJson","value_cloneArray","newValue","clone","value_equals","a","b","equals","value_defaultValueArray","defaultValue","checkNonDecimalLength","limit"],"sources":["../../src/type/arrayBasic.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}