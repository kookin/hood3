{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VectorBasicType = void 0;\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst arrayBasic_2 = require(\"../view/arrayBasic\");\nconst arrayBasic_3 = require(\"../viewDU/arrayBasic\");\nconst array_1 = require(\"./array\");\n/**\n * Vector: Ordered fixed-length homogeneous collection, with N values\n *\n * Array of Basic type:\n * - Basic types are max 32 bytes long so multiple values may be packed in the same node.\n * - Basic types are never returned in a view wrapper, but their value representation\n */\nclass VectorBasicType extends array_1.ArrayType {\n  constructor(elementType, length, opts) {\n    super(elementType);\n    this.elementType = elementType;\n    this.length = length;\n    this.isList = false;\n    this.isViewMutable = true;\n    if (!elementType.isBasic) throw Error(\"elementType must be basic\");\n    if (length === 0) throw Error(\"Vector length must be > 0\");\n    this.typeName = opts?.typeName ?? `Vector[${elementType.typeName}, ${length}]`;\n    // TODO Check that itemsPerChunk is an integer\n    this.itemsPerChunk = 32 / elementType.byteLength;\n    this.maxChunkCount = Math.ceil(length * elementType.byteLength / 32);\n    this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n    this.depth = this.chunkDepth;\n    this.fixedSize = length * elementType.byteLength;\n    this.minSize = this.fixedSize;\n    this.maxSize = this.fixedSize;\n    this.defaultLen = length;\n  }\n  static named(elementType, limit, opts) {\n    return new (named_1.namedClass(VectorBasicType, opts.typeName))(elementType, limit, opts);\n  }\n  getView(tree) {\n    return new arrayBasic_2.ArrayBasicTreeView(this, tree);\n  }\n  getViewDU(node, cache) {\n    // cache type should be validated (if applicate) in the view\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new arrayBasic_3.ArrayBasicTreeViewDU(this, node, cache);\n  }\n  commitView(view) {\n    return view.node;\n  }\n  commitViewDU(view) {\n    view.commit();\n    return view.node;\n  }\n  cacheOfViewDU(view) {\n    return view.cache;\n  }\n  // Serialization + deserialization\n  value_serializedSize() {\n    return this.fixedSize;\n  }\n  value_serializeToBytes(output, offset, value) {\n    return arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, this.length, output, offset, value);\n  }\n  value_deserializeFromBytes(data, start, end) {\n    return arrayBasic_1.value_deserializeFromBytesArrayBasic(this.elementType, data, start, end, this);\n  }\n  tree_serializedSize() {\n    return this.fixedSize;\n  }\n  tree_serializeToBytes(output, offset, node) {\n    return arrayBasic_1.tree_serializeToBytesArrayBasic(this.elementType, this.length, this.depth, output, offset, node);\n  }\n  tree_deserializeFromBytes(data, start, end) {\n    return arrayBasic_1.tree_deserializeFromBytesArrayBasic(this.elementType, this.depth, data, start, end, this);\n  }\n  // Helpers for TreeView\n  tree_getLength() {\n    return this.length;\n  }\n  tree_setLength() {\n    // Vector's length is immutable, ignore this call\n  }\n  tree_getChunksNode(node) {\n    return node;\n  }\n  tree_setChunksNode(rootNode, chunksNode) {\n    return chunksNode;\n  }\n  // Merkleization\n  getRoots(value) {\n    const uint8Array = new Uint8Array(this.fixedSize);\n    const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n    arrayBasic_1.value_serializeToBytesArrayBasic(this.elementType, this.length, {\n      uint8Array,\n      dataView\n    }, 0, value);\n    return merkleize_1.splitIntoRootChunks(uint8Array);\n  }\n}\nexports.VectorBasicType = VectorBasicType;","map":{"version":3,"names":["merkleize_1","require","named_1","arrayBasic_1","arrayBasic_2","arrayBasic_3","array_1","VectorBasicType","ArrayType","constructor","elementType","length","opts","isList","isViewMutable","isBasic","Error","typeName","itemsPerChunk","byteLength","maxChunkCount","Math","ceil","chunkDepth","maxChunksToDepth","depth","fixedSize","minSize","maxSize","defaultLen","named","limit","namedClass","getView","tree","ArrayBasicTreeView","getViewDU","node","cache","ArrayBasicTreeViewDU","commitView","view","commitViewDU","commit","cacheOfViewDU","value_serializedSize","value_serializeToBytes","output","offset","value","value_serializeToBytesArrayBasic","value_deserializeFromBytes","data","start","end","value_deserializeFromBytesArrayBasic","tree_serializedSize","tree_serializeToBytes","tree_serializeToBytesArrayBasic","tree_deserializeFromBytes","tree_deserializeFromBytesArrayBasic","tree_getLength","tree_setLength","tree_getChunksNode","tree_setChunksNode","rootNode","chunksNode","getRoots","uint8Array","Uint8Array","dataView","DataView","buffer","byteOffset","splitIntoRootChunks","exports"],"sources":["../../src/type/vectorBasic.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}