{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitArrayTreeView = void 0;\nconst abstract_1 = require(\"./abstract\");\n/**\n * Thin wrapper around BitArray to upstream changes to `tree` on every `this.set()`\n */\nclass BitArrayTreeView extends abstract_1.TreeView {\n  constructor(type, tree) {\n    super();\n    this.type = type;\n    this.tree = tree;\n    this.bitArray = type.tree_toValue(tree.rootNode);\n  }\n  get node() {\n    return this.tree.rootNode;\n  }\n  // Wrapped API from BitArray\n  /** @see BitArray.uint8Array */\n  get uint8Array() {\n    return this.bitArray.uint8Array;\n  }\n  /** @see BitArray.bitLen */\n  get bitLen() {\n    return this.bitArray.bitLen;\n  }\n  /** @see BitArray.get */\n  get(bitIndex) {\n    return this.bitArray.get(bitIndex);\n  }\n  /** @see BitArray.set */\n  set(bitIndex, bit) {\n    this.bitArray.set(bitIndex, bit);\n    // Upstream changes\n    this.tree.rootNode = this.type.value_toTree(this.bitArray);\n  }\n  /** @see BitArray.mergeOrWith */\n  mergeOrWith(bitArray2) {\n    this.bitArray.mergeOrWith(bitArray2);\n  }\n  /** @see BitArray.intersectValues */\n  intersectValues(values) {\n    return this.bitArray.intersectValues(values);\n  }\n  /** @see BitArray.getTrueBitIndexes */\n  getTrueBitIndexes() {\n    return this.bitArray.getTrueBitIndexes();\n  }\n  /** @see BitArray.getSingleTrueBit */\n  getSingleTrueBit() {\n    return this.bitArray.getSingleTrueBit();\n  }\n  /** @see BitArray.toBoolArray */\n  toBoolArray() {\n    return this.bitArray.toBoolArray();\n  }\n}\nexports.BitArrayTreeView = BitArrayTreeView;","map":{"version":3,"names":["abstract_1","require","BitArrayTreeView","TreeView","constructor","type","tree","bitArray","tree_toValue","rootNode","node","uint8Array","bitLen","get","bitIndex","set","bit","value_toTree","mergeOrWith","bitArray2","intersectValues","values","getTrueBitIndexes","getSingleTrueBit","toBoolArray","exports"],"sources":["../../src/view/bitArray.ts"],"sourcesContent":[null],"mappings":";;;;;;AAGA,MAAAA,UAAA,GAAAC,OAAA;AAEA;;;AAGA,MAAaC,gBAAiB,SAAQF,UAAA,CAAAG,QAAmD;EAGvFC,YAAqBC,IAA+C,EAAYC,IAAU;IACxF,KAAK,EAAE;IADY,KAAAD,IAAI,GAAJA,IAAI;IAAuD,KAAAC,IAAI,GAAJA,IAAI;IAGlF,IAAI,CAACC,QAAQ,GAAGF,IAAI,CAACG,YAAY,CAACF,IAAI,CAACG,QAAQ,CAAC;EAClD;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,IAAI,CAACJ,IAAI,CAACG,QAAQ;EAC3B;EAEA;EAEA;EACA,IAAIE,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACJ,QAAQ,CAACI,UAAU;EACjC;EAEA;EACA,IAAIC,MAAMA,CAAA;IACR,OAAO,IAAI,CAACL,QAAQ,CAACK,MAAM;EAC7B;EAEA;EACAC,GAAGA,CAACC,QAAgB;IAClB,OAAO,IAAI,CAACP,QAAQ,CAACM,GAAG,CAACC,QAAQ,CAAC;EACpC;EAEA;EACAC,GAAGA,CAACD,QAAgB,EAAEE,GAAY;IAChC,IAAI,CAACT,QAAQ,CAACQ,GAAG,CAACD,QAAQ,EAAEE,GAAG,CAAC;IAEhC;IACA,IAAI,CAACV,IAAI,CAACG,QAAQ,GAAG,IAAI,CAACJ,IAAI,CAACY,YAAY,CAAC,IAAI,CAACV,QAAQ,CAAC;EAC5D;EAEA;EACAW,WAAWA,CAACC,SAAmB;IAC7B,IAAI,CAACZ,QAAQ,CAACW,WAAW,CAACC,SAAS,CAAC;EACtC;EAEA;EACAC,eAAeA,CAAIC,MAAW;IAC5B,OAAO,IAAI,CAACd,QAAQ,CAACa,eAAe,CAACC,MAAM,CAAC;EAC9C;EAEA;EACAC,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACf,QAAQ,CAACe,iBAAiB,EAAE;EAC1C;EAEA;EACAC,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAAChB,QAAQ,CAACgB,gBAAgB,EAAE;EACzC;EAEA;EACAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACjB,QAAQ,CAACiB,WAAW,EAAE;EACpC;;AA7DFC,OAAA,CAAAvB,gBAAA,GAAAA,gBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}