{"ast":null,"code":"export function assertType(obj, key) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"string\";\n  if (!obj[key] || typeof obj[key] !== type) {\n    throw new Error(`Missing or invalid \"${key}\" param`);\n  }\n}\nexport function hasRequiredParams(params, required) {\n  let matches = true;\n  required.forEach(key => {\n    const exists = (key in params);\n    if (!exists) {\n      matches = false;\n    }\n  });\n  return matches;\n}\nexport function hasExactParamsLength(params, length) {\n  return Array.isArray(params) ? params.length === length : Object.keys(params).length === length;\n}\nexport function hasRequiredParamsLength(params, minLength) {\n  return Array.isArray(params) ? params.length >= minLength : Object.keys(params).length >= minLength;\n}\nexport function checkParams(params, required, optional) {\n  const exact = !optional.length;\n  const matchesLength = exact ? hasExactParamsLength(params, required.length) : hasRequiredParamsLength(params, required.length);\n  if (!matchesLength) return false;\n  return hasRequiredParams(params, required);\n}\nexport function methodEndsWith(method, expected) {\n  let separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"_\";\n  const split = method.split(separator);\n  return split[split.length - 1].trim().toLowerCase() === expected.trim().toLowerCase();\n}","map":{"version":3,"names":["assertType","obj","key","type","arguments","length","undefined","Error","hasRequiredParams","params","required","matches","forEach","exists","hasExactParamsLength","Array","isArray","Object","keys","hasRequiredParamsLength","minLength","checkParams","optional","exact","matchesLength","methodEndsWith","method","expected","separator","split","trim","toLowerCase"],"sources":["../../src/misc.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAM,SAAUA,UAAUA,CAACC,GAAQ,EAAEC,GAAW,EAAiB;EAAA,IAAfC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,QAAQ;EAC/D,IAAI,CAACH,GAAG,CAACC,GAAG,CAAC,IAAI,OAAOD,GAAG,CAACC,GAAG,CAAC,KAAKC,IAAI,EAAE;IACzC,MAAM,IAAII,KAAK,CAAC,uBAAuBL,GAAG,SAAS,CAAC;;AAExD;AAEA,OAAM,SAAUM,iBAAiBA,CAACC,MAAW,EAAEC,QAAkB;EAC/D,IAAIC,OAAO,GAAG,IAAI;EAClBD,QAAQ,CAACE,OAAO,CAACV,GAAG,IAAG;IACrB,MAAMW,MAAM,IAAGX,GAAG,IAAIO,MAAM;IAC5B,IAAI,CAACI,MAAM,EAAE;MACXF,OAAO,GAAG,KAAK;;EAEnB,CAAC,CAAC;EACF,OAAOA,OAAO;AAChB;AAEA,OAAM,SAAUG,oBAAoBA,CAACL,MAAW,EAAEJ,MAAc;EAC9D,OAAOU,KAAK,CAACC,OAAO,CAACP,MAAM,CAAC,GACxBA,MAAM,CAACJ,MAAM,KAAKA,MAAM,GACxBY,MAAM,CAACC,IAAI,CAACT,MAAM,CAAC,CAACJ,MAAM,KAAKA,MAAM;AAC3C;AAEA,OAAM,SAAUc,uBAAuBA,CACrCV,MAAW,EACXW,SAAiB;EAEjB,OAAOL,KAAK,CAACC,OAAO,CAACP,MAAM,CAAC,GACxBA,MAAM,CAACJ,MAAM,IAAIe,SAAS,GAC1BH,MAAM,CAACC,IAAI,CAACT,MAAM,CAAC,CAACJ,MAAM,IAAIe,SAAS;AAC7C;AAEA,OAAM,SAAUC,WAAWA,CACzBZ,MAAW,EACXC,QAAkB,EAClBY,QAAkB;EAElB,MAAMC,KAAK,GAAG,CAACD,QAAQ,CAACjB,MAAM;EAC9B,MAAMmB,aAAa,GAAGD,KAAK,GACvBT,oBAAoB,CAACL,MAAM,EAAEC,QAAQ,CAACL,MAAM,CAAC,GAC7Cc,uBAAuB,CAACV,MAAM,EAAEC,QAAQ,CAACL,MAAM,CAAC;EACpD,IAAI,CAACmB,aAAa,EAAE,OAAO,KAAK;EAChC,OAAOhB,iBAAiB,CAACC,MAAM,EAAEC,QAAQ,CAAC;AAC5C;AAEA,OAAM,SAAUe,cAAcA,CAC5BC,MAAc,EACdC,QAAgB,EACD;EAAA,IAAfC,SAAS,GAAAxB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,GAAG;EAEf,MAAMyB,KAAK,GAAGH,MAAM,CAACG,KAAK,CAACD,SAAS,CAAC;EACrC,OACEC,KAAK,CAACA,KAAK,CAACxB,MAAM,GAAG,CAAC,CAAC,CAACyB,IAAI,EAAE,CAACC,WAAW,EAAE,KAC5CJ,QAAQ,CAACG,IAAI,EAAE,CAACC,WAAW,EAAE;AAEjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}