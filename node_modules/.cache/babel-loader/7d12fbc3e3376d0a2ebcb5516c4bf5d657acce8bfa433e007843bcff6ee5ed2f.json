{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListCompositeType = void 0;\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nconst arrayComposite_1 = require(\"./arrayComposite\");\nconst listComposite_1 = require(\"../view/listComposite\");\nconst listComposite_2 = require(\"../viewDU/listComposite\");\nconst array_1 = require(\"./array\");\n/**\n * List: ordered variable-length homogeneous collection, limited to N values\n *\n * Array of Composite type:\n * - Composite types always take at least one chunk\n * - Composite types are always returned as views\n */\nclass ListCompositeType extends array_1.ArrayType {\n  constructor(elementType, limit, opts) {\n    super(elementType);\n    this.elementType = elementType;\n    this.limit = limit;\n    this.itemsPerChunk = 1;\n    this.fixedSize = null;\n    this.isList = true;\n    this.isViewMutable = true;\n    this.defaultLen = 0;\n    if (elementType.isBasic) throw Error(\"elementType must not be basic\");\n    if (limit === 0) throw Error(\"List limit must be > 0\");\n    this.typeName = opts?.typeName ?? `List[${elementType.typeName}, ${limit}]`;\n    this.maxChunkCount = this.limit;\n    this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n    // Depth includes the extra level for the length node\n    this.depth = this.chunkDepth + 1;\n    this.minSize = 0;\n    this.maxSize = arrayComposite_1.maxSizeArrayComposite(elementType, this.limit);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static named(elementType, limit, opts) {\n    return new (named_1.namedClass(ListCompositeType, opts.typeName))(elementType, limit, opts);\n  }\n  getView(tree) {\n    return new listComposite_1.ListCompositeTreeView(this, tree);\n  }\n  getViewDU(node, cache) {\n    // cache type should be validated (if applicate) in the view\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new listComposite_2.ListCompositeTreeViewDU(this, node, cache);\n  }\n  commitView(view) {\n    return view.node;\n  }\n  commitViewDU(view) {\n    view.commit();\n    return view.node;\n  }\n  cacheOfViewDU(view) {\n    return view.cache;\n  }\n  // Serialization + deserialization\n  value_serializedSize(value) {\n    return arrayComposite_1.value_serializedSizeArrayComposite(this.elementType, value.length, value);\n  }\n  value_serializeToBytes(output, offset, value) {\n    return arrayComposite_1.value_serializeToBytesArrayComposite(this.elementType, value.length, output, offset, value);\n  }\n  value_deserializeFromBytes(data, start, end) {\n    return arrayComposite_1.value_deserializeFromBytesArrayComposite(this.elementType, data, start, end, this);\n  }\n  tree_serializedSize(node) {\n    const chunksNode = this.tree_getChunksNode(node);\n    const length = this.tree_getLength(node);\n    return arrayComposite_1.tree_serializedSizeArrayComposite(this.elementType, length, this.chunkDepth, chunksNode);\n  }\n  tree_serializeToBytes(output, offset, node) {\n    const chunksNode = this.tree_getChunksNode(node);\n    const length = this.tree_getLength(node);\n    return arrayComposite_1.tree_serializeToBytesArrayComposite(this.elementType, length, this.chunkDepth, chunksNode, output, offset);\n  }\n  tree_deserializeFromBytes(data, start, end) {\n    return arrayComposite_1.tree_deserializeFromBytesArrayComposite(this.elementType, this.chunkDepth, data, start, end, this);\n  }\n  // Helpers for TreeView\n  tree_getLength(node) {\n    return arrayBasic_1.getLengthFromRootNode(node);\n  }\n  tree_setLength(tree, length) {\n    tree.rootNode = arrayBasic_1.addLengthNode(tree.rootNode.left, length);\n  }\n  tree_getChunksNode(node) {\n    return node.left;\n  }\n  tree_setChunksNode(rootNode, chunksNode, newLength) {\n    return arrayBasic_1.setChunksNode(rootNode, chunksNode, newLength);\n  }\n  // Merkleization\n  hashTreeRoot(value) {\n    return merkleize_1.mixInLength(super.hashTreeRoot(value), value.length);\n  }\n  getRoots(value) {\n    return arrayComposite_1.value_getRootsArrayComposite(this.elementType, value.length, value);\n  }\n}\nexports.ListCompositeType = ListCompositeType;","map":{"version":3,"names":["merkleize_1","require","named_1","arrayBasic_1","arrayComposite_1","listComposite_1","listComposite_2","array_1","ListCompositeType","ArrayType","constructor","elementType","limit","opts","itemsPerChunk","fixedSize","isList","isViewMutable","defaultLen","isBasic","Error","typeName","maxChunkCount","chunkDepth","maxChunksToDepth","depth","minSize","maxSize","maxSizeArrayComposite","named","namedClass","getView","tree","ListCompositeTreeView","getViewDU","node","cache","ListCompositeTreeViewDU","commitView","view","commitViewDU","commit","cacheOfViewDU","value_serializedSize","value","value_serializedSizeArrayComposite","length","value_serializeToBytes","output","offset","value_serializeToBytesArrayComposite","value_deserializeFromBytes","data","start","end","value_deserializeFromBytesArrayComposite","tree_serializedSize","chunksNode","tree_getChunksNode","tree_getLength","tree_serializedSizeArrayComposite","tree_serializeToBytes","tree_serializeToBytesArrayComposite","tree_deserializeFromBytes","tree_deserializeFromBytesArrayComposite","getLengthFromRootNode","tree_setLength","rootNode","addLengthNode","left","tree_setChunksNode","newLength","setChunksNode","hashTreeRoot","mixInLength","getRoots","value_getRootsArrayComposite","exports"],"sources":["../../src/type/listComposite.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}