{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UintBigintType = exports.UintNumberType = exports.uintBigintByteLens = exports.uintNumberByteLens = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst named_1 = require(\"../util/named\");\nconst basic_1 = require(\"./basic\");\n/* eslint-disable @typescript-eslint/member-ordering */\nconst MAX_SAFE_INTEGER_BN = BigInt(Number.MAX_SAFE_INTEGER);\nconst BIGINT_2_POW_64 = BigInt(2) ** BigInt(64);\nconst BIGINT_2_POW_128 = BigInt(2) ** BigInt(128);\nconst BIGINT_2_POW_192 = BigInt(2) ** BigInt(192);\n// const BIGINT_64_MAX = BigInt(\"0xffffffffffffffff\");\nconst NUMBER_2_POW_32 = 2 ** 32;\nconst NUMBER_32_MAX = 0xffffffff;\nexports.uintNumberByteLens = [1, 2, 4, 8];\nexports.uintBigintByteLens = [1, 2, 4, 8, 16, 32];\n/**\n * Uint: N-bit unsigned integer (where N in [8, 16, 32, 64, 128, 256])\n * - Notation: uintN\n *\n * UintNumber is represented as the Javascript primitive value 'Number'.\n *\n * The Number type is a double-precision 64-bit binary format IEEE 754 value (numbers between -(2^53 − 1) and\n * 2^53 − 1). It also has the symbolic value: +Infinity.\n *\n * As of 2021 performance of 'Number' is extremely faster than 'BigInt'. Some values are spec'ed as Uint64 but\n * practically they will never exceed 53 bits, such as any unit time or simple counters. This type is an optimization\n * for these cases, as UintNumber64 can represent any value between 0 and 2^53−1 as well as the max value 2^64-1.\n */\nclass UintNumberType extends basic_1.BasicType {\n  constructor(byteLength, opts) {\n    super();\n    this.byteLength = byteLength;\n    if (byteLength > 8) {\n      throw Error(\"UintNumber byteLength limit is 8\");\n    }\n    if (Math.log2(byteLength) % 1 !== 0) {\n      throw Error(\"byteLength must be a power of 2\");\n    }\n    this.typeName = opts?.typeName ?? `uint${byteLength * 8}`;\n    if (opts?.clipInfinity) this.typeName += \"Inf\";\n    if (opts?.setBitwiseOR) this.typeName += \"OR\";\n    this.itemsPerChunk = 32 / this.byteLength;\n    this.fixedSize = byteLength;\n    this.minSize = byteLength;\n    this.maxSize = byteLength;\n    this.maxDecimalStr = (BigInt(2) ** BigInt(this.byteLength * 8) - BigInt(1)).toString(10);\n    this.clipInfinity = opts?.clipInfinity === true;\n    this.setBitwiseOR = opts?.setBitwiseOR === true;\n  }\n  static named(byteLength, opts) {\n    return new (named_1.namedClass(UintNumberType, opts.typeName))(byteLength, opts);\n  }\n  defaultValue() {\n    return 0;\n  }\n  // Serialization + deserialization\n  value_serializeToBytes(_ref, offset, value) {\n    let {\n      dataView\n    } = _ref;\n    switch (this.byteLength) {\n      case 1:\n        dataView.setInt8(offset, value);\n        break;\n      case 2:\n        dataView.setUint16(offset, value, true);\n        break;\n      case 4:\n        dataView.setUint32(offset, value, true);\n        break;\n      case 8:\n        if (value === Infinity) {\n          // TODO: Benchmark if it's faster to set BIGINT_64_MAX once\n          dataView.setUint32(offset, 0xffffffff);\n          dataView.setUint32(offset + 4, 0xffffffff);\n        } else {\n          dataView.setUint32(offset, value & 0xffffffff, true);\n          dataView.setUint32(offset + 4, value / NUMBER_2_POW_32 & 0xffffffff, true);\n        }\n        break;\n    }\n    return offset + this.byteLength;\n  }\n  value_deserializeFromBytes(_ref2, start, end) {\n    let {\n      dataView\n    } = _ref2;\n    this.assertValidSize(end - start);\n    switch (this.byteLength) {\n      case 1:\n        return dataView.getUint8(start);\n      case 2:\n        return dataView.getUint16(start, true);\n      case 4:\n        return dataView.getUint32(start, true);\n      case 8:\n        {\n          const a = dataView.getUint32(start, true);\n          const b = dataView.getUint32(start + 4, true);\n          if (b === NUMBER_32_MAX && a === NUMBER_32_MAX && this.clipInfinity) {\n            return Infinity;\n          } else {\n            return b * NUMBER_2_POW_32 + a;\n          }\n        }\n    }\n  }\n  tree_serializeToBytes(output, offset, node) {\n    const value = node.getUint(this.byteLength, 0, this.clipInfinity);\n    this.value_serializeToBytes(output, offset, value);\n    return offset + this.byteLength;\n  }\n  tree_deserializeFromBytes(data, start, end) {\n    this.assertValidSize(end - start);\n    const value = this.value_deserializeFromBytes(data, start, end);\n    const node = persistent_merkle_tree_1.LeafNode.fromZero();\n    node.setUint(this.byteLength, 0, value, this.clipInfinity);\n    return node;\n  }\n  // Fast Tree access\n  tree_getFromNode(leafNode) {\n    return leafNode.getUint(this.byteLength, 0, this.clipInfinity);\n  }\n  tree_setToNode(leafNode, value) {\n    this.tree_setToPackedNode(leafNode, 0, value);\n  }\n  tree_getFromPackedNode(leafNode, index) {\n    const offsetBytes = this.byteLength * (index % this.itemsPerChunk);\n    return leafNode.getUint(this.byteLength, offsetBytes, this.clipInfinity);\n  }\n  tree_setToPackedNode(leafNode, index, value) {\n    const offsetBytes = this.byteLength * (index % this.itemsPerChunk);\n    // TODO: Benchmark the cost of this if, and consider using a different class\n    if (this.setBitwiseOR) {\n      leafNode.bitwiseOrUint(this.byteLength, offsetBytes, value);\n    } else {\n      leafNode.setUint(this.byteLength, offsetBytes, value, this.clipInfinity);\n    }\n  }\n  // JSON\n  fromJson(json) {\n    if (typeof json === \"number\") {\n      return json;\n    } else if (typeof json === \"string\") {\n      if (this.clipInfinity && json === this.maxDecimalStr) {\n        // Allow to handle max possible number\n        return Infinity;\n      } else {\n        const num = parseInt(json, 10);\n        if (isNaN(num)) {\n          throw Error(\"JSON invalid number isNaN\");\n        } else if (num > Number.MAX_SAFE_INTEGER) {\n          // Throw to prevent decimal precision errors downstream\n          throw Error(\"JSON invalid number > MAX_SAFE_INTEGER\");\n        } else {\n          return num;\n        }\n      }\n    } else if (typeof json === \"bigint\") {\n      if (json > MAX_SAFE_INTEGER_BN) {\n        // Throw to prevent decimal precision errors downstream\n        throw Error(\"JSON invalid number > MAX_SAFE_INTEGER_BN\");\n      } else {\n        return Number(json);\n      }\n    } else {\n      throw Error(`JSON invalid type ${typeof json} expected number`);\n    }\n  }\n  toJson(value) {\n    if (value === Infinity) {\n      return this.maxDecimalStr;\n    } else {\n      return value.toString(10);\n    }\n  }\n}\nexports.UintNumberType = UintNumberType;\n/**\n * Uint: N-bit unsigned integer (where N in [8, 16, 32, 64, 128, 256])\n * - Notation: uintN\n *\n * UintBigint is represented as the Javascript primitive value 'BigInt'.\n *\n * The BigInt type is a numeric primitive in JavaScript that can represent integers with arbitrary precision.\n * With BigInts, you can safely store and operate on large integers even beyond the safe integer limit for Numbers.\n *\n * As of 2021 performance of 'Number' is extremely faster than 'BigInt'. For Uint values under 53 bits use UintNumber.\n * For other values that may exceed 53 bits, use UintBigint.\n */\nclass UintBigintType extends basic_1.BasicType {\n  constructor(byteLength, opts) {\n    super();\n    this.byteLength = byteLength;\n    if (byteLength > 32) {\n      throw Error(\"UintBigint byteLength limit is 32\");\n    }\n    if (Math.log2(byteLength) % 1 !== 0) {\n      throw Error(\"byteLength must be a power of 2\");\n    }\n    this.typeName = opts?.typeName ?? `uintBigint${byteLength * 8}`;\n    this.byteLength = byteLength;\n    this.itemsPerChunk = 32 / this.byteLength;\n    this.fixedSize = byteLength;\n    this.minSize = byteLength;\n    this.maxSize = byteLength;\n  }\n  static named(byteLength, opts) {\n    return new (named_1.namedClass(UintBigintType, opts.typeName))(byteLength, opts);\n  }\n  defaultValue() {\n    return BigInt(0);\n  }\n  // Serialization + deserialization\n  value_serializeToBytes(_ref3, offset, value) {\n    let {\n      dataView\n    } = _ref3;\n    switch (this.byteLength) {\n      case 1:\n        dataView.setInt8(offset, Number(value));\n        break;\n      case 2:\n        dataView.setUint16(offset, Number(value), true);\n        break;\n      case 4:\n        dataView.setUint32(offset, Number(value), true);\n        break;\n      case 8:\n        dataView.setBigUint64(offset, value, true);\n        break;\n      default:\n        {\n          for (let i = 0; i < this.byteLength; i += 8) {\n            if (i > 0) value = value / BIGINT_2_POW_64;\n            const lo = BigInt.asUintN(64, value);\n            dataView.setBigUint64(offset + i, lo, true);\n          }\n        }\n    }\n    return offset + this.byteLength;\n  }\n  value_deserializeFromBytes(_ref4, start, end) {\n    let {\n      dataView\n    } = _ref4;\n    const size = end - start;\n    if (size !== this.byteLength) {\n      throw Error(`Invalid size ${size} expected ${this.byteLength}`);\n    }\n    // Note: pre-assigning the right function at the constructor to avoid this switch is not faster\n    switch (this.byteLength) {\n      case 1:\n        return BigInt(dataView.getUint8(start));\n      case 2:\n        return BigInt(dataView.getUint16(start, true));\n      case 4:\n        return BigInt(dataView.getUint32(start, true));\n      case 8:\n        return dataView.getBigUint64(start, true);\n      case 16:\n        {\n          const a = dataView.getBigUint64(start, true);\n          const b = dataView.getBigUint64(start + 8, true);\n          return b * BIGINT_2_POW_64 + a;\n        }\n      case 32:\n        {\n          const a = dataView.getBigUint64(start, true);\n          const b = dataView.getBigUint64(start + 8, true);\n          const c = dataView.getBigUint64(start + 16, true);\n          const d = dataView.getBigUint64(start + 24, true);\n          return d * BIGINT_2_POW_192 + c * BIGINT_2_POW_128 + b * BIGINT_2_POW_64 + a;\n        }\n    }\n  }\n  tree_serializeToBytes(output, offset, node) {\n    const value = node.getUintBigint(this.byteLength, 0);\n    this.value_serializeToBytes(output, offset, value);\n    return offset + this.byteLength;\n  }\n  tree_deserializeFromBytes(data, start, end) {\n    const size = end - start;\n    if (size !== this.byteLength) {\n      throw Error(`Invalid size ${size} expected ${this.byteLength}`);\n    }\n    const value = this.value_deserializeFromBytes(data, start, end);\n    const node = persistent_merkle_tree_1.LeafNode.fromZero();\n    node.setUintBigint(this.byteLength, 0, value);\n    return node;\n  }\n  // Fast Tree access\n  tree_getFromNode(leafNode) {\n    return leafNode.getUintBigint(this.byteLength, 0);\n  }\n  /** Mutates node to set value */\n  tree_setToNode(leafNode, value) {\n    this.tree_setToPackedNode(leafNode, 0, value);\n  }\n  /** EXAMPLE of `tree_getFromNode` */\n  tree_getFromPackedNode(leafNode, index) {\n    const offsetBytes = this.byteLength * (index % this.itemsPerChunk);\n    return leafNode.getUintBigint(this.byteLength, offsetBytes);\n  }\n  /** Mutates node to set value */\n  tree_setToPackedNode(leafNode, index, value) {\n    const offsetBytes = this.byteLength * (index % this.itemsPerChunk);\n    // TODO: Not-optimized, copy pasted from UintNumberType\n    leafNode.setUintBigint(this.byteLength, offsetBytes, value);\n  }\n  // JSON\n  fromJson(json) {\n    if (typeof json === \"bigint\") {\n      return json;\n    } else if (typeof json === \"string\" || typeof json === \"number\") {\n      return BigInt(json);\n    } else {\n      throw Error(`JSON invalid type ${typeof json} expected bigint`);\n    }\n  }\n  toJson(value) {\n    return value.toString(10);\n  }\n}\nexports.UintBigintType = UintBigintType;","map":{"version":3,"names":["persistent_merkle_tree_1","require","named_1","basic_1","MAX_SAFE_INTEGER_BN","BigInt","Number","MAX_SAFE_INTEGER","BIGINT_2_POW_64","BIGINT_2_POW_128","BIGINT_2_POW_192","NUMBER_2_POW_32","NUMBER_32_MAX","exports","uintNumberByteLens","uintBigintByteLens","UintNumberType","BasicType","constructor","byteLength","opts","Error","Math","log2","typeName","clipInfinity","setBitwiseOR","itemsPerChunk","fixedSize","minSize","maxSize","maxDecimalStr","toString","named","namedClass","defaultValue","value_serializeToBytes","_ref","offset","value","dataView","setInt8","setUint16","setUint32","Infinity","value_deserializeFromBytes","_ref2","start","end","assertValidSize","getUint8","getUint16","getUint32","a","b","tree_serializeToBytes","output","node","getUint","tree_deserializeFromBytes","data","LeafNode","fromZero","setUint","tree_getFromNode","leafNode","tree_setToNode","tree_setToPackedNode","tree_getFromPackedNode","index","offsetBytes","bitwiseOrUint","fromJson","json","num","parseInt","isNaN","toJson","UintBigintType","_ref3","setBigUint64","i","lo","asUintN","_ref4","size","getBigUint64","c","d","getUintBigint","setUintBigint"],"sources":["../../src/type/uint.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}