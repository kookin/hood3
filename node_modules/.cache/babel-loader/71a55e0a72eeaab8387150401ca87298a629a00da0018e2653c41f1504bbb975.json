{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VectorCompositeType = void 0;\nconst merkleize_1 = require(\"../util/merkleize\");\nconst named_1 = require(\"../util/named\");\nconst arrayComposite_1 = require(\"./arrayComposite\");\nconst arrayComposite_2 = require(\"../view/arrayComposite\");\nconst arrayComposite_3 = require(\"../viewDU/arrayComposite\");\nconst array_1 = require(\"./array\");\n/**\n * Vector: Ordered fixed-length homogeneous collection, with N values\n *\n * Array of Composite type:\n * - Composite types always take at least one chunk\n * - Composite types are always returned as views\n */\nclass VectorCompositeType extends array_1.ArrayType {\n  constructor(elementType, length, opts) {\n    super(elementType);\n    this.elementType = elementType;\n    this.length = length;\n    this.itemsPerChunk = 1;\n    this.isList = false;\n    this.isViewMutable = true;\n    if (elementType.isBasic) throw Error(\"elementType must not be basic\");\n    if (length === 0) throw Error(\"Vector length must be > 0\");\n    this.typeName = opts?.typeName ?? `Vector[${elementType.typeName}, ${length}]`;\n    this.maxChunkCount = length;\n    this.chunkDepth = merkleize_1.maxChunksToDepth(this.maxChunkCount);\n    this.depth = this.chunkDepth;\n    this.fixedSize = elementType.fixedSize === null ? null : length * elementType.fixedSize;\n    this.minSize = arrayComposite_1.minSizeArrayComposite(elementType, length);\n    this.maxSize = arrayComposite_1.maxSizeArrayComposite(elementType, length);\n    this.defaultLen = length;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static named(elementType, limit, opts) {\n    return new (named_1.namedClass(VectorCompositeType, opts.typeName))(elementType, limit, opts);\n  }\n  getView(tree) {\n    return new arrayComposite_2.ArrayCompositeTreeView(this, tree);\n  }\n  getViewDU(node, cache) {\n    // cache type should be validated (if applicate) in the view\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new arrayComposite_3.ArrayCompositeTreeViewDU(this, node, cache);\n  }\n  commitView(view) {\n    return view.node;\n  }\n  commitViewDU(view) {\n    view.commit();\n    return view.node;\n  }\n  cacheOfViewDU(view) {\n    return view.cache;\n  }\n  // Serialization + deserialization\n  value_serializedSize(value) {\n    return arrayComposite_1.value_serializedSizeArrayComposite(this.elementType, this.length, value);\n  }\n  value_serializeToBytes(output, offset, value) {\n    return arrayComposite_1.value_serializeToBytesArrayComposite(this.elementType, this.length, output, offset, value);\n  }\n  value_deserializeFromBytes(data, start, end) {\n    return arrayComposite_1.value_deserializeFromBytesArrayComposite(this.elementType, data, start, end, this);\n  }\n  tree_serializedSize(node) {\n    return arrayComposite_1.tree_serializedSizeArrayComposite(this.elementType, this.length, this.depth, node);\n  }\n  tree_serializeToBytes(output, offset, node) {\n    return arrayComposite_1.tree_serializeToBytesArrayComposite(this.elementType, this.length, this.depth, node, output, offset);\n  }\n  tree_deserializeFromBytes(data, start, end) {\n    return arrayComposite_1.tree_deserializeFromBytesArrayComposite(this.elementType, this.depth, data, start, end, this);\n  }\n  // Helpers for TreeView\n  tree_getLength() {\n    return this.length;\n  }\n  tree_setLength() {\n    // Vector's length is immutable, ignore this call\n  }\n  tree_getChunksNode(node) {\n    return node;\n  }\n  tree_setChunksNode(rootNode, chunksNode) {\n    return chunksNode;\n  }\n  // Merkleization\n  getRoots(value) {\n    return arrayComposite_1.value_getRootsArrayComposite(this.elementType, this.length, value);\n  }\n}\nexports.VectorCompositeType = VectorCompositeType;","map":{"version":3,"names":["merkleize_1","require","named_1","arrayComposite_1","arrayComposite_2","arrayComposite_3","array_1","VectorCompositeType","ArrayType","constructor","elementType","length","opts","itemsPerChunk","isList","isViewMutable","isBasic","Error","typeName","maxChunkCount","chunkDepth","maxChunksToDepth","depth","fixedSize","minSize","minSizeArrayComposite","maxSize","maxSizeArrayComposite","defaultLen","named","limit","namedClass","getView","tree","ArrayCompositeTreeView","getViewDU","node","cache","ArrayCompositeTreeViewDU","commitView","view","commitViewDU","commit","cacheOfViewDU","value_serializedSize","value","value_serializedSizeArrayComposite","value_serializeToBytes","output","offset","value_serializeToBytesArrayComposite","value_deserializeFromBytes","data","start","end","value_deserializeFromBytesArrayComposite","tree_serializedSize","tree_serializedSizeArrayComposite","tree_serializeToBytes","tree_serializeToBytesArrayComposite","tree_deserializeFromBytes","tree_deserializeFromBytesArrayComposite","tree_getLength","tree_setLength","tree_getChunksNode","tree_setChunksNode","rootNode","chunksNode","getRoots","value_getRootsArrayComposite","exports"],"sources":["../../src/type/vectorComposite.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}