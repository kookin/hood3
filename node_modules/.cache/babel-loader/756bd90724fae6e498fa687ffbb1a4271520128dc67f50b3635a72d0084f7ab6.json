{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getContainerTreeViewDUClass = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst basic_1 = require(\"../type/basic\");\nconst composite_1 = require(\"../type/composite\");\nconst abstract_1 = require(\"./abstract\");\nclass ContainerTreeViewDU extends abstract_1.TreeViewDU {\n  constructor(type, _rootNode, cache) {\n    super();\n    this.type = type;\n    this._rootNode = _rootNode;\n    this.nodes = [];\n    this.nodesChanged = new Set();\n    this.viewsChanged = new Map();\n    if (cache) {\n      this.nodes = cache.nodes;\n      this.caches = cache.caches;\n      this.nodesPopulated = cache.nodesPopulated;\n    } else {\n      this.nodes = [];\n      this.caches = [];\n      this.nodesPopulated = false;\n    }\n  }\n  get node() {\n    return this._rootNode;\n  }\n  get cache() {\n    return {\n      nodes: this.nodes,\n      caches: this.caches,\n      nodesPopulated: this.nodesPopulated\n    };\n  }\n  commit() {\n    if (this.nodesChanged.size === 0 && this.viewsChanged.size === 0) {\n      return;\n    }\n    const nodesChanged = [];\n    for (const [index, view] of this.viewsChanged) {\n      const fieldType = this.type.fieldsEntries[index].fieldType;\n      const node = fieldType.commitViewDU(view);\n      // Set new node in nodes array to ensure data represented in the tree and fast nodes access is equal\n      this.nodes[index] = node;\n      nodesChanged.push({\n        index,\n        node\n      });\n      // Cache the view's caches to preserve it's data after 'this.viewsChanged.clear()'\n      const cache = fieldType.cacheOfViewDU(view);\n      if (cache) this.caches[index] = cache;\n    }\n    for (const index of this.nodesChanged) {\n      nodesChanged.push({\n        index,\n        node: this.nodes[index]\n      });\n    }\n    // TODO: Optimize to loop only once, Numerical sort ascending\n    const nodesChangedSorted = nodesChanged.sort((a, b) => a.index - b.index);\n    const indexes = nodesChangedSorted.map(entry => entry.index);\n    const nodes = nodesChangedSorted.map(entry => entry.node);\n    this._rootNode = persistent_merkle_tree_1.setNodesAtDepth(this._rootNode, this.type.depth, indexes, nodes);\n    this.nodesChanged.clear();\n    this.viewsChanged.clear();\n  }\n  clearCache() {\n    this.nodes = [];\n    this.caches = [];\n    this.nodesPopulated = false;\n    // Must clear nodesChanged, otherwise a subsequent commit call will break, because it assumes a node is there\n    this.nodesChanged.clear();\n    // It's not necessary to clear this.viewsChanged since they have no effect on the cache.\n    // However preserving _SOME_ caches results in a very unpredictable experience.\n    this.viewsChanged.clear();\n  }\n}\nfunction getContainerTreeViewDUClass(type) {\n  class CustomContainerTreeViewDU extends ContainerTreeViewDU {}\n  // Dynamically define prototype methods\n  for (let index = 0; index < type.fieldsEntries.length; index++) {\n    const {\n      fieldName,\n      fieldType\n    } = type.fieldsEntries[index];\n    // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n    // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n    // and use the cached views array to store the new node.\n    if (basic_1.isBasicType(fieldType)) {\n      Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // TODO: Review the memory cost of this closures\n        get: function () {\n          // First walk through the tree to get the root node for that index\n          let node = this.nodes[index];\n          if (node === undefined) {\n            node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n            this.nodes[index] = node;\n          }\n          return fieldType.tree_getFromNode(node);\n        },\n        set: function (value) {\n          // Create new node if current leafNode is not dirty\n          let nodeChanged;\n          if (this.nodesChanged.has(index)) {\n            // TODO: This assumes that node has already been populated\n            nodeChanged = this.nodes[index];\n          } else {\n            const nodePrev = this.nodes[index] ?? persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n            nodeChanged = nodePrev.clone();\n            // Store the changed node in the nodes cache\n            this.nodes[index] = nodeChanged;\n            this.nodesChanged.add(index);\n          }\n          fieldType.tree_setToNode(nodeChanged, value);\n        }\n      });\n    }\n    // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n    // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n    // set it to the parent tree in the field gindex.\n    else if (composite_1.isCompositeType(fieldType)) {\n      Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n        configurable: false,\n        enumerable: true,\n        // Returns TreeViewDU of fieldName\n        get: function () {\n          const viewChanged = this.viewsChanged.get(index);\n          if (viewChanged) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return viewChanged;\n          }\n          let node = this.nodes[index];\n          if (node === undefined) {\n            node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n            this.nodes[index] = node;\n          }\n          // Keep a reference to the new view to call .commit on it latter, only if mutable\n          const view = fieldType.getViewDU(node, this.caches[index]);\n          if (fieldType.isViewMutable) {\n            this.viewsChanged.set(index, view);\n          }\n          // No need to persist the child's view cache since a second get returns this view instance.\n          // The cache is only persisted on commit where the viewsChanged map is dropped.\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n          return view;\n        },\n        // Expects TreeViewDU of fieldName\n        set: function (view) {\n          // When setting a view:\n          // - Not necessary to commit node\n          // - Not necessary to persist cache\n          // Just keeping a reference to the view in this.viewsChanged ensures consistency\n          this.viewsChanged.set(index, view);\n        }\n      });\n    }\n    // Should never happen\n    else {\n      /* istanbul ignore next - unreachable code */\n      throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);\n    }\n  }\n  // Change class name\n  Object.defineProperty(CustomContainerTreeViewDU, \"name\", {\n    value: type.typeName,\n    writable: false\n  });\n  return CustomContainerTreeViewDU;\n}\nexports.getContainerTreeViewDUClass = getContainerTreeViewDUClass;","map":{"version":3,"names":["persistent_merkle_tree_1","require","basic_1","composite_1","abstract_1","ContainerTreeViewDU","TreeViewDU","constructor","type","_rootNode","cache","nodes","nodesChanged","Set","viewsChanged","Map","caches","nodesPopulated","node","commit","size","index","view","fieldType","fieldsEntries","commitViewDU","push","cacheOfViewDU","nodesChangedSorted","sort","a","b","indexes","map","entry","setNodesAtDepth","depth","clear","clearCache","getContainerTreeViewDUClass","CustomContainerTreeViewDU","length","fieldName","isBasicType","Object","defineProperty","prototype","configurable","enumerable","get","undefined","getNodeAtDepth","tree_getFromNode","set","value","nodeChanged","has","nodePrev","clone","add","tree_setToNode","isCompositeType","viewChanged","getViewDU","isViewMutable","Error","typeName","writable","exports"],"sources":["../../src/viewDU/container.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}