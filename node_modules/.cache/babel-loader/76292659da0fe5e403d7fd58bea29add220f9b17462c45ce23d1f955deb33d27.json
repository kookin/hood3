{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitArrayType = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst byteArray_1 = require(\"../util/byteArray\");\nconst merkleize_1 = require(\"../util/merkleize\");\nconst composite_1 = require(\"./composite\");\nconst bitArray_1 = require(\"../view/bitArray\");\nconst bitArray_2 = require(\"../viewDU/bitArray\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * BitArray: ordered array collection of boolean values\n * - Value: `BitArray`, @see BitArray for a justification of its memory efficiency and performance\n * - View: `BitArrayTreeView`\n * - ViewDU: `BitArrayTreeViewDU`\n */\nclass BitArrayType extends composite_1.CompositeType {\n  constructor() {\n    super(...arguments);\n    this.isViewMutable = true;\n  }\n  getView(tree) {\n    return new bitArray_1.BitArrayTreeView(this, tree);\n  }\n  getViewDU(node) {\n    return new bitArray_2.BitArrayTreeViewDU(this, node);\n  }\n  commitView(view) {\n    return view.node;\n  }\n  commitViewDU(view) {\n    view.commit();\n    return view.node;\n  }\n  cacheOfViewDU(view) {\n    return view.cache;\n  }\n  // Merkleization\n  getRoots(value) {\n    return merkleize_1.splitIntoRootChunks(value.uint8Array);\n  }\n  // Proofs\n  getPropertyGindex() {\n    // Stop navigating below this type. Must only request complete data\n    return null;\n  }\n  getPropertyType() {\n    /* istanbul ignore next - unreachable code, getPropertyGindex null return prevents this call */\n    throw Error(\"Must only request BitArray complete data\");\n  }\n  getIndexProperty() {\n    /* istanbul ignore next - unreachable code, getPropertyGindex null return prevents this call */\n    throw Error(\"Must only request BitArray complete data\");\n  }\n  tree_fromProofNode(node) {\n    return {\n      node,\n      done: true\n    };\n  }\n  tree_getLeafGindices(rootGindex, rootNode) {\n    const byteLen = this.tree_getByteLen(rootNode);\n    const chunkCount = Math.ceil(byteLen / 32);\n    const startIndex = persistent_merkle_tree_1.concatGindices([rootGindex, persistent_merkle_tree_1.toGindex(this.depth, BigInt(0))]);\n    const gindices = new Array(chunkCount);\n    for (let i = 0, gindex = startIndex; i < chunkCount; i++, gindex++) {\n      gindices[i] = gindex;\n    }\n    // include the length chunk\n    if (this.isList) {\n      gindices.push(persistent_merkle_tree_1.concatGindices([rootGindex, composite_1.LENGTH_GINDEX]));\n    }\n    return gindices;\n  }\n  // JSON\n  fromJson(json) {\n    const uint8Array = byteArray_1.fromHexString(json);\n    const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n    // value_deserializeFromBytes MUST validate length (limit, or length)\n    return this.value_deserializeFromBytes({\n      uint8Array,\n      dataView\n    }, 0, uint8Array.length);\n  }\n  toJson(value) {\n    return byteArray_1.toHexString(this.serialize(value));\n  }\n  clone(value) {\n    return value.clone();\n  }\n  equals(a, b) {\n    return a.bitLen === b.bitLen && byteArray_1.byteArrayEquals(a.uint8Array, b.uint8Array);\n  }\n}\nexports.BitArrayType = BitArrayType;","map":{"version":3,"names":["persistent_merkle_tree_1","require","byteArray_1","merkleize_1","composite_1","bitArray_1","bitArray_2","BitArrayType","CompositeType","constructor","isViewMutable","getView","tree","BitArrayTreeView","getViewDU","node","BitArrayTreeViewDU","commitView","view","commitViewDU","commit","cacheOfViewDU","cache","getRoots","value","splitIntoRootChunks","uint8Array","getPropertyGindex","getPropertyType","Error","getIndexProperty","tree_fromProofNode","done","tree_getLeafGindices","rootGindex","rootNode","byteLen","tree_getByteLen","chunkCount","Math","ceil","startIndex","concatGindices","toGindex","depth","BigInt","gindices","Array","i","gindex","isList","push","LENGTH_GINDEX","fromJson","json","fromHexString","dataView","DataView","buffer","byteOffset","byteLength","value_deserializeFromBytes","length","toJson","toHexString","serialize","clone","equals","a","b","bitLen","byteArrayEquals","exports"],"sources":["../../src/type/bitArray.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,wBAAA,GAAAC,OAAA;AACA,MAAAC,WAAA,GAAAD,OAAA;AACA,MAAAE,WAAA,GAAAF,OAAA;AACA,MAAAG,WAAA,GAAAH,OAAA;AAEA,MAAAI,UAAA,GAAAJ,OAAA;AACA,MAAAK,UAAA,GAAAL,OAAA;AAEA;AAEA;;;;;;AAMA,MAAsBM,YAAa,SAAQH,WAAA,CAAAI,aAA6D;EAAxGC,YAAA;;IACW,KAAAC,aAAa,GAAG,IAAI;EAyF/B;EAvFEC,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAIP,UAAA,CAAAQ,gBAAgB,CAAC,IAAI,EAAED,IAAI,CAAC;EACzC;EAEAE,SAASA,CAACC,IAAU;IAClB,OAAO,IAAIT,UAAA,CAAAU,kBAAkB,CAAC,IAAI,EAAED,IAAI,CAAC;EAC3C;EAEAE,UAAUA,CAACC,IAAsB;IAC/B,OAAOA,IAAI,CAACH,IAAI;EAClB;EAEAI,YAAYA,CAACD,IAAwB;IACnCA,IAAI,CAACE,MAAM,EAAE;IACb,OAAOF,IAAI,CAACH,IAAI;EAClB;EAEAM,aAAaA,CAACH,IAAwB;IACpC,OAAOA,IAAI,CAACI,KAAK;EACnB;EAEA;EAEUC,QAAQA,CAACC,KAAe;IAChC,OAAOrB,WAAA,CAAAsB,mBAAmB,CAACD,KAAK,CAACE,UAAU,CAAC;EAC9C;EAEA;EAEAC,iBAAiBA,CAAA;IACf;IACA,OAAO,IAAI;EACb;EAEAC,eAAeA,CAAA;IACb;IACA,MAAMC,KAAK,CAAC,0CAA0C,CAAC;EACzD;EAEAC,gBAAgBA,CAAA;IACd;IACA,MAAMD,KAAK,CAAC,0CAA0C,CAAC;EACzD;EAEAE,kBAAkBA,CAAChB,IAAU;IAC3B,OAAO;MAACA,IAAI;MAAEiB,IAAI,EAAE;IAAI,CAAC;EAC3B;EAEAC,oBAAoBA,CAACC,UAAkB,EAAEC,QAAe;IACtD,MAAMC,OAAO,GAAG,IAAI,CAACC,eAAe,CAACF,QAAQ,CAAC;IAC9C,MAAMG,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACJ,OAAO,GAAG,EAAE,CAAC;IAC1C,MAAMK,UAAU,GAAGzC,wBAAA,CAAA0C,cAAc,CAAC,CAACR,UAAU,EAAElC,wBAAA,CAAA2C,QAAQ,CAAC,IAAI,CAACC,KAAK,EAAEC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChF,MAAMC,QAAQ,GAAG,IAAIC,KAAK,CAAST,UAAU,CAAC;IAC9C,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEC,MAAM,GAAGR,UAAU,EAAEO,CAAC,GAAGV,UAAU,EAAEU,CAAC,EAAE,EAAEC,MAAM,EAAE,EAAE;MAClEH,QAAQ,CAACE,CAAC,CAAC,GAAGC,MAAM;;IAGtB;IACA,IAAI,IAAI,CAACC,MAAM,EAAE;MACfJ,QAAQ,CAACK,IAAI,CAACnD,wBAAA,CAAA0C,cAAc,CAAC,CAACR,UAAU,EAAE9B,WAAA,CAAAgD,aAAa,CAAC,CAAC,CAAC;;IAG5D,OAAON,QAAQ;EACjB;EAIA;EAEAO,QAAQA,CAACC,IAAa;IACpB,MAAM5B,UAAU,GAAGxB,WAAA,CAAAqD,aAAa,CAACD,IAAc,CAAC;IAChD,MAAME,QAAQ,GAAG,IAAIC,QAAQ,CAAC/B,UAAU,CAACgC,MAAM,EAAEhC,UAAU,CAACiC,UAAU,EAAEjC,UAAU,CAACkC,UAAU,CAAC;IAC9F;IACA,OAAO,IAAI,CAACC,0BAA0B,CAAC;MAACnC,UAAU;MAAE8B;IAAQ,CAAC,EAAE,CAAC,EAAE9B,UAAU,CAACoC,MAAM,CAAC;EACtF;EAEAC,MAAMA,CAACvC,KAAe;IACpB,OAAOtB,WAAA,CAAA8D,WAAW,CAAC,IAAI,CAACC,SAAS,CAACzC,KAAK,CAAC,CAAC;EAC3C;EAEA0C,KAAKA,CAAC1C,KAAe;IACnB,OAAOA,KAAK,CAAC0C,KAAK,EAAE;EACtB;EAEAC,MAAMA,CAACC,CAAW,EAAEC,CAAW;IAC7B,OAAOD,CAAC,CAACE,MAAM,KAAKD,CAAC,CAACC,MAAM,IAAIpE,WAAA,CAAAqE,eAAe,CAACH,CAAC,CAAC1C,UAAU,EAAE2C,CAAC,CAAC3C,UAAU,CAAC;EAC7E;;AAzFF8C,OAAA,CAAAjE,YAAA,GAAAA,YAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}